<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[windows下使用nodist管理node版本]]></title>
    <url>%2Fblog%2F2023%2F08%2Fwindows%E4%B8%8Bnodist%E7%AE%A1%E7%90%86node%E7%89%88%E6%9C%AC%2F</url>
    <content type="text"><![CDATA[安装nodistnodist 切换node版本安装特定版本的node 1nodist + 12.7.0 查看本地安装过的node版本 1nodist ls 查看所有的node版本 1nodist ds 匹配node版本的npm 1nodist npm match 高版本的node安装npm之后，npm命令报错libnotfound 解决办法，把npm目录中的workspace中的文件除了arborist拷贝到node_modules目录下 arborist拷贝到node_modules/@npmcli目录下]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AST示例]]></title>
    <url>%2Fblog%2F2023%2F08%2FAST%E4%BF%AE%E6%94%B9Java%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B%2F</url>
    <content type="text"><![CDATA[AST代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199package com.sysware.p2m.service.pm.core;import cn.hutool.core.util.ObjUtil;import cn.hutool.core.util.ObjectUtil;import cn.hutool.core.util.StrUtil;import com.github.javaparser.JavaParser;import com.github.javaparser.ParseResult;import com.github.javaparser.Problem;import com.github.javaparser.ast.CompilationUnit;import com.github.javaparser.ast.ImportDeclaration;import com.github.javaparser.ast.Node;import com.github.javaparser.ast.NodeList;import com.github.javaparser.ast.body.BodyDeclaration;import com.github.javaparser.ast.body.MethodDeclaration;import com.github.javaparser.ast.body.Parameter;import com.github.javaparser.ast.body.TypeDeclaration;import com.github.javaparser.ast.expr.*;import com.github.javaparser.ast.stmt.Statement;import com.github.javaparser.ast.type.TypeParameter;import org.springframework.data.domain.Pageable;import java.io.IOException;import java.nio.charset.StandardCharsets;import java.nio.file.*;import java.nio.file.attribute.BasicFileAttributes;import java.util.List;import java.util.concurrent.atomic.AtomicInteger;import java.util.stream.Collectors;public class Main &#123; public static void main(String[] args) throws Exception &#123; Path path = Paths.get("F:\\java\\p2m\\service-pm\\"); Files.walkFileTree(path, new SimpleFileVisitor&lt;Path&gt;() &#123; private void accept(Path p, CompilationUnit compilationUnit) throws IOException &#123; List&lt;ImportDeclaration&gt; imports = compilationUnit.getImports(); boolean page = false; NodeList&lt;TypeDeclaration&lt;?&gt;&gt; typeDeclarationNodeList = compilationUnit.getTypes(); for (TypeDeclaration type : typeDeclarationNodeList) &#123; NodeList&lt;BodyDeclaration&gt; typeMembers = type.getMembers(); if (null == typeMembers) &#123; continue; &#125; for (BodyDeclaration member : typeMembers) &#123; if (member instanceof MethodDeclaration) &#123; MethodDeclaration method = (MethodDeclaration) member; List&lt;Parameter&gt; parameters = method.getParameters(); if (null == parameters) &#123; continue; &#125; boolean isPage = parameters.stream().anyMatch(c -&gt; c.getNameAsString().equals("pageNumber")); if (!isPage) &#123; continue; &#125; if (!page) &#123; page = isPage; &#125; List&lt;AnnotationExpr&gt; annotations = method.getAnnotations(); if (null != annotations) &#123; boolean match = annotations.stream().anyMatch(a -&gt; a.getNameAsString().equals("Parameter") &amp;&amp; ((NormalAnnotationExpr) a).getPairs().stream().anyMatch(ca -&gt; StrUtil.containsAny(ObjUtil.toString(ca.getValue()), "pageNumber", "pageSize"))); if (match) &#123; annotations = annotations.stream().filter(a -&gt; ((NormalAnnotationExpr) a).getPairs().stream().noneMatch(ca -&gt; StrUtil.containsAny(ObjUtil.toString(ca.getValue()), "pageNumber", "pageSize"))) .collect(Collectors.toList()); annotations.add(new NormalAnnotationExpr()); NodeList&lt;MemberValuePair&gt; memberValuePairs = new NodeList&lt;&gt;(); memberValuePairs.add(new MemberValuePair("name", new StringLiteralExpr("pageable"))); annotations.add(new NormalAnnotationExpr(new Name("Parameter"), memberValuePairs)); &#125; boolean amatch = annotations.stream().anyMatch(a -&gt; a.getNameAsString().equals("Parameters") &amp;&amp; a.getChildNodes().stream().anyMatch(ca -&gt; ca instanceof ArrayInitializerExpr &amp;&amp; ca.getChildNodes().stream().anyMatch(cca -&gt; cca instanceof NormalAnnotationExpr &amp;&amp; ((NormalAnnotationExpr) cca).getPairs().stream().anyMatch(cccap -&gt; StrUtil.containsAny(ObjectUtil.toString(cccap.getValue()), "pageNumber", "pageSize"))))); if (amatch) &#123; annotations.forEach(a -&gt; &#123; if (a.getNameAsString().equals("Parameters")) &#123; a.getChildNodes().forEach(ca -&gt; &#123; if (ca instanceof ArrayInitializerExpr) &#123; ArrayInitializerExpr aca = (ArrayInitializerExpr) ca; List&lt;Node&gt; cca = aca.getChildNodes(); List&lt;Expression&gt; cca_ = cca.stream().filter(ccca -&gt; !(ccca instanceof NormalAnnotationExpr) || ((NormalAnnotationExpr) ccca).getPairs().stream().noneMatch(cccap -&gt; StrUtil.containsAny(ObjectUtil.toString(cccap.getValue()), "pageNumber", "pageSize"))) .map(ccca -&gt; (Expression) ccca) .collect(Collectors.toList()); NodeList&lt;MemberValuePair&gt; memberValuePairs = new NodeList&lt;&gt;(); memberValuePairs.add(new MemberValuePair("name", new StringLiteralExpr("pageable"))); cca_.add(new NormalAnnotationExpr(new Name("Parameter"), memberValuePairs)); ((ArrayInitializerExpr) ca).setValues(new NodeList&lt;&gt;(cca_)); &#125; &#125;); &#125; &#125;); &#125; &#125; NodeList&lt;Parameter&gt; paramList = parameters.stream().filter(c -&gt; !(c.getNameAsString().equals("pageNumber") || c.getNameAsString().equals("pageSize"))).collect(Collectors.toCollection(NodeList::new)); Parameter parameter = new Parameter(new TypeParameter("Pageable"), "pageable"); paramList.add(parameter); // System.out.println(method.getName()); // System.out.println(paramList); method.setParameters(paramList); method.getBody() .ifPresent(b -&gt; &#123; NodeList&lt;Statement&gt; statements = b.getStatements(); for (Statement stmt : statements) &#123; List&lt;Node&gt; childrenNodes = stmt.getChildNodes(); if (null == childrenNodes) &#123; continue; &#125; for (Node childrenNode : childrenNodes) &#123; if (childrenNode instanceof MethodCallExpr) &#123; MethodCallExpr callExpr = (MethodCallExpr) childrenNode; NodeList&lt;Expression&gt; callExprArgs = callExpr.getArguments(); if (null == callExprArgs) &#123; continue; &#125; boolean match = callExprArgs.stream().anyMatch(e -&gt; e instanceof NameExpr &amp;&amp; "pageNumber,PageSize".contains(((NameExpr) e).getNameAsString())); if (match) &#123; callExprArgs = callExprArgs.stream().filter(e -&gt; &#123; if (e instanceof NameExpr) &#123; NameExpr expr = (NameExpr) e; boolean falg = expr.getNameAsString().equals("pageNumber") || expr.getNameAsString().equals("pageSize"); return !falg; &#125; return false; &#125;).collect(Collectors.toCollection(NodeList::new)); callExprArgs.add(new NameExpr("pageable")); &#125; boolean amatch = callExprArgs.stream().anyMatch(e -&gt; e instanceof MethodCallExpr &amp;&amp; ((MethodCallExpr) e).getArguments().contains(new NameExpr("pageNumber"))); if (amatch) &#123; AtomicInteger idx = new AtomicInteger(); AtomicInteger adder = new AtomicInteger(0); callExprArgs.stream().map(e -&gt; new Object[]&#123;adder.getAndIncrement(), e&#125;) .filter(o -&gt; &#123; Object o1 = o[1]; if (o1 instanceof MethodCallExpr) &#123; MethodCallExpr expr = (MethodCallExpr) o1; boolean falg = expr.getArguments().contains(new NameExpr("pageNumber")); if (falg) &#123; idx.set((Integer) o[0]); &#125; return !falg; &#125; return true; &#125;) .map(o -&gt; (Expression) o[1]) .collect(Collectors.toCollection(NodeList::new)); callExprArgs.add(idx.get(), new NameExpr("pageable")); &#125; // 重新赋值 callExpr.setArguments(callExprArgs); &#125; &#125; &#125; &#125;); &#125; &#125; &#125; if (page) &#123; imports.add(new ImportDeclaration(Pageable.class.getName(), false, false)); // System.out.println(compilationUnit.toString()); Files.write(p, compilationUnit.toString().getBytes(StandardCharsets.UTF_8)); &#125; &#125; @Override public FileVisitResult visitFile(Path p, BasicFileAttributes attrs) throws IOException &#123; boolean controller = p.toString().endsWith(".java"); boolean mainjava = p.toString().endsWith("Main.java"); if (mainjava) &#123; return super.visitFile(p, attrs); &#125; if (!controller) &#123; return super.visitFile(p, attrs); &#125; JavaParser javaParser = new JavaParser(); ParseResult&lt;CompilationUnit&gt; parse = javaParser.parse(p); boolean successful = parse.isSuccessful(); if (!successful) &#123; List&lt;Problem&gt; problems = parse.getProblems(); System.out.println(problems); System.out.println(p); &#125; parse.ifSuccessful(c -&gt; &#123; try &#123; accept(p, c); &#125; catch (IOException e) &#123; System.out.println("异常"); &#125; &#125;); return super.visitFile(p, attrs); &#125; &#125;); &#125;&#125; 123456&lt;!-- https://mvnrepository.com/artifact/com.github.javaparser/javaparser-core --&gt; &lt;dependency&gt; &lt;groupId&gt;com.github.javaparser&lt;/groupId&gt; &lt;artifactId&gt;javaparser-core&lt;/artifactId&gt; &lt;version&gt;3.25.4&lt;/version&gt; &lt;/dependency&gt;]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[查看JVM运行时参数]]></title>
    <url>%2Fblog%2F2023%2F08%2F%E6%9F%A5%E7%9C%8BJVM%E8%BF%90%E8%A1%8C%E6%97%B6%E5%8F%82%E6%95%B0%2F</url>
    <content type="text"><![CDATA[查看运行的java进程12jpsjps -l # 显示具体的类名 可以看到其中PID是15368的进程是我的项目 查看参数1jinfo -flags PID 可以看到远程调试是否开启]]></content>
      <categories>
        <category>jvm</category>
      </categories>
      <tags>
        <tag>JVM</tag>
        <tag>远程调试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[磁盘分区格式]]></title>
    <url>%2Fblog%2F2023%2F08%2F%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA%E6%A0%BC%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[磁盘分区格式 MBR （Master Boot Record）主要分区记录表 GPT （GUID Partion Table） 系统在安装时会根据硬盘容量自动选择，如果硬盘容量小于2TB，就会使用MBR方式，如果硬盘容量大于2TB，就会默认是用GPT方式。 安装前可以按Tab键，输入核心参数==inst.gpt #F44336==强制使用GPT。]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux,磁盘分区</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常用数据库JDBC URL格式]]></title>
    <url>%2Fblog%2F2023%2F08%2F%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E5%BA%93JDBC%20URL%E6%A0%BC%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[Oracle 数据库JDBC URL:123jdbc:oracle:thin:@//&lt;host&gt;:&lt;port&gt;/ServiceName或jdbc:oracle:thin:@&lt;host&gt;:&lt;port&gt;:&lt;SID&gt; MySQL数据库JDBC URL: jdbc:mysql://&lt;host&gt;:&lt;port&gt;/&lt;database_name&gt; 默认端口3306，如果服务器使用默认端口则port可以省略 MySQL Connector/J Driver *允许在URL中添加额外的连接属性jdbc:mysql://&lt;host&gt;:&lt;port&gt;/&lt;database_name&gt;?property1=value1&amp;property2=value2*]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>JDBCURL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[spring3.x版本的坑]]></title>
    <url>%2Fblog%2F2023%2F08%2Fspring3.x%E7%89%88%E6%9C%AC%E7%9A%84%E5%9D%91%2F</url>
    <content type="text"><![CDATA[FileSystemResourceLoader在不同系统环境中表现不一致 windows正常运行 123String path = “D:/a/b/c.properties”;FileSystemResourceLoader resourceLoader = new FileSystemResourceLoader();Resource resource = resourceLoader.getResource(path); Linux报错 123String path = “D:/a/b/c.properties”;FileSystemResourceLoader resourceLoader = new FileSystemResourceLoader();Resource resource = resourceLoader.getResource(path);]]></content>
      <categories>
        <category>问题</category>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[typora+picgo图床]]></title>
    <url>%2Fblog%2F2023%2F08%2Ftypora%2Bpicgo%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A%2F</url>
    <content type="text"><![CDATA[安装typora 安装node 安装npm 安装picgo-core 1npm install picgo -g 安装gitee插件 1picgo install gitee-uploader 打开偏好设置 上传服务选择 custom command 自定义命令(node 设置了环境变量) 1picgo upload 配置文件 C:\Users{userhome}.picgo\config.json 1234567891011121314151617&#123; "picBed": &#123; "current": "gitee", "uploader": "gitee", "gitee": &#123; "branch": "master", // 图片上传到这个分支 "customPath": "", "customUrl": "", "path": "img/", // 路径 "repo": "readiay/document", // &lt;用户名&gt;/&lt;仓库名称&gt; "token": "34097jy0142b767hy64569baadeac247" // token 令牌 &#125; &#125;, "picgoPlugins": &#123; "picgo-plugin-gitee-uploader": true &#125;&#125;]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>图床</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ubantu普通用户和root用户切换]]></title>
    <url>%2Fblog%2F2023%2F08%2Fubantu%E6%99%AE%E9%80%9A%E7%94%A8%E6%88%B7%E5%92%8Croot%E7%94%A8%E6%88%B7%E5%88%87%E6%8D%A2%2F</url>
    <content type="text"><![CDATA[普通用户切换到root用户 su,输入root用户密码 输入sudo su,输入root用户的密码 输入su root,按提示输入root用户的密码 root用户切换到普通用户 输入exit 输入su user(user是普通用户的用户名) Ctrl+D 组合]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>ubantu</tag>
        <tag>linux用户切换</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ubantu用户root 默认密码修改]]></title>
    <url>%2Fblog%2F2023%2F08%2Fubantu%E7%94%A8%E6%88%B7root%20%E9%BB%98%E8%AE%A4%E5%AF%86%E7%A0%81%E4%BF%AE%E6%94%B9%2F</url>
    <content type="text"><![CDATA[ubantu系统安装后，root密码修改 使用已有的用户登录，运行命令1sudo passwd root 输入当前用户的密码 输入2此root用户要设置的密码 切换到root用户下操作1su 输入root用户的密码后，登录到root用户]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>ubantu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[对象序列化为JSON的踩坑]]></title>
    <url>%2Fblog%2F2023%2F08%2F%E5%AF%B9%E8%B1%A1%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%BAJSON%E7%9A%84%E8%B8%A9%E5%9D%91%2F</url>
    <content type="text"><![CDATA[描述vo类的id定义为java.long.Long类型，在springmvc使用json序列化返回前端时，前端解析数据和返回数据不一致，这是Long类型精度丢失的问题。 浏览器response看到的数据是正确的123456789101112131415161718192021222324252627&#123; "code": 0, "msg": "", "count": 3, "data": [&#123; "id": 1118797170067400000, "name": "测试数据1", "code": null, "createTime": "2019-04-18 16:43:25", "version": "1", "description": "1" &#125;, &#123; "id": 1118803926994600000, "name": "测试数据3", "code": null, "createTime": "2019-04-18 17:10:16", "version": "3", "description": "版本3" &#125;, &#123; "id": 111880007545763000000, "name": "测试数据2", "code": null, "createTime": "2019-04-18 16:54:58", "version": "2", "description": "版本2" &#125;]&#125; 浏览器parse看到的数据是不正确的 解决方案vo类lang类型在序列化的时候序列化位数字精度丢失，在字段上添加注解。12@JsonSerialize(using = ToStringSerializer.class)private Long id; 添加注解后序列化为json的字符串123456789101112131415161718192021222324252627&#123; "code": 0, "msg": "", "count": 3, "data": [&#123; "id": "1118797170067431426", "name": "测试数据1", "code": null, "createTime": "2019-04-18 16:43:25", "version": "1", "description": "1" &#125;, &#123; "id": "1118803926994653186", "name": "测试数据3", "code": null, "createTime": "2019-04-18 17:10:16", "version": "3", "description": "版本3" &#125;, &#123; "id": "1118800075457630210", "name": "测试数据2", "code": null, "createTime": "2019-04-18 16:54:58", "version": "2", "description": "版本2" &#125;]&#125; 可以看到id有了双引号，是字符串，不会发生精度丢失的问题]]></content>
      <categories>
        <category>开发问题</category>
      </categories>
      <tags>
        <tag>json</tag>
        <tag>序列化</tag>
        <tag>问题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[小书匠预览主题：chrome]]></title>
    <url>%2Fblog%2F2023%2F08%2F%E5%B0%8F%E4%B9%A6%E5%8C%A0%E9%A2%84%E8%A7%88%E4%B8%BB%E9%A2%98%EF%BC%9Achrome%2F</url>
    <content type="text"><![CDATA[修改内容 标题的字号 主标题居中显示 路径 ${小书匠安装路径}\app\css\preview\themes\chrom.css 代码body h1,p &#123; line-height: 1.6&#125;body,pre &#123; word-break: break-word&#125;.tag.label,.xsj_mindmap_caption,kbd &#123; display: inline-block&#125;body,kbd &#123; color: #000&#125;img,kbd &#123; vertical-align: middle&#125;address,dl &#123; margin-bottom: 20px&#125;blockquote p,ol ol,ol ul,ul ol,ul ul &#123; margin-bottom: 0&#125;address,blockquote small &#123; display: block; line-height: 20px&#125;address,blockquote small,dd,dt &#123; line-height: 20px&#125;.xiaoshujiang_pre,pre &#123; word-wrap: break-word; tab-size: 4; white-space: pre-wrap&#125;.li_linenum,.xiaoshujiang_code.hljs.code_linenums,code.hljs.code_linenums &#123; position: relative&#125;img,table &#123; max-width: 100%&#125;body &#123; font-family: 'Helvetica Neue', Helvetica, Tahoma, Arial, 'Hiragino Sans GB', STHeiti, "Microsoft YaHei", "微软雅黑", 'WenQuanYi Micro Hei', STXihei, "华文细黑", Heiti, "黑体", SimSun, "宋体", Song, sans-serif; font-size: 16px; line-height: 1.33; font-weight: 100; background: #fff; word-wrap: break-word; letter-spacing: 0; word-spacing: .25em&#125;a:focus &#123; outline: #1A1AA6 dotted thin; outline: -webkit-focus-ring-color auto 5px; outline-offset: -2px&#125;a:active,a:hover &#123; outline: 0&#125;a &#123; color: #1A1AA6; text-decoration: none&#125;a:hover &#123; text-decoration: underline&#125;h1,h2,h3,h4,h5,h6 &#123; color: #0c07ff; margin: 1em 0 .6em; font-family: inherit; font-weight: 500; line-height: 2.35rem; text-rendering: optimizelegibility&#125;.mermaid_svg,.xiaoshujiang_pre,pre &#123; font-family: monospace&#125;h1 &#123; font-size: 2.0rem&#125;h2 &#123; font-size: 1.9rem&#125;h3 &#123; font-size: 1.8rem&#125;h4 &#123; font-size: 1.7rem&#125;h5 &#123; font-size: 1.6rem&#125;h6 &#123; font-size: 1.5rem&#125;body h2,body h3 &#123; line-height: 1.1&#125;hr &#123; margin: 20px 0; border: 0; border-top: 1px dashed #000; border-left: 90px solid transparent; border-right: 90px solid transparent&#125;p &#123; margin: 0 0 1.1em&#125;pre &#123; line-height: initial !important&#125;kbd &#123; padding: 3px 5px; font-size: 11px; line-height: 10px; background-color: #fcfcfc; border: 1px solid #000; border-bottom-color: #000; border-radius: 3px; box-shadow: inset 0 -1px 0 #000&#125;address &#123; font-style: normal&#125;img &#123; height: auto; border: 0&#125;table &#123; background-color: transparent; border-collapse: collapse; border-spacing: 0; word-break: initial; border: 1px solid #000&#125;small &#123; font-size: 85%&#125;dt,strong &#123; font-weight: 700&#125;em &#123; font-style: italic&#125;cite &#123; font-style: normal&#125;ol,ul &#123; color: #b90690; padding: 0; margin: 0 0 10px 35px&#125;dd &#123; margin-left: 10px&#125;body dd,body dt &#123; line-height: 1.35em&#125;abbr[data-original-title],abbr[title] &#123; cursor: help; border-bottom: 1px dotted #969896&#125;blockquote &#123; padding: 0 0 0 15px; margin: 0 0 20px; border-left: 10px solid #de935f; background: rgba(222, 147, 95, .15)&#125;blockquote p &#123; display: inline; font-size: 16px; font-weight: 300; line-height: 25px&#125;.table th,.tag.label &#123; font-weight: 700&#125;blockquote small &#123; color: #969896&#125;blockquote small:before &#123; content: '\2014 \00A0'&#125;blockquote footer &#123; margin: 1em 0; font-style: italic&#125;blockquote footer cite &#123; margin: 0 1em&#125;code &#123; background-color: rgba(60, 76, 114, .15); color: #3c4c72; border-radius: 4px; padding: 2px 4px&#125;body code &#123; border: 0; border-radius: 4px; font-size: 90%&#125;text &#123; font-size: 14px&#125;h1.story_title &#123; margin: .7em 0; text-align: center&#125;.story_tags &#123; margin: 0 0 1.2em&#125;.tag.label &#123; vertical-align: baseline; line-height: 1; margin: .125em; background-color: rgba(222, 147, 95, .15); color: #de935f; border-color: rgba(222, 147, 95, .15); background-image: none; padding: .6em .8em; text-transform: none; border-radius: .2857rem; box-sizing: border-box; font-size: 12px&#125;.table &#123; width: 100%; margin-bottom: 20px; margin-right: auto; margin-left: auto&#125;.table td,.table th &#123; padding: 8px; line-height: 20px; text-align: left; vertical-align: top; border-top: 1px solid #000&#125;.table thead th &#123; vertical-align: bottom&#125;.table caption+thead tr:first-child td,.table caption+thead tr:first-child th,.table colgroup+thead tr:first-child td,.table colgroup+thead tr:first-child th,.table thead:first-child tr:first-child td,.table thead:first-child tr:first-child th &#123; border-top: 0&#125;.table tbody+tbody &#123; border-top: 2px solid #000&#125;.table .table,.table-striped tbody&gt;tr:nth-child(odd)&gt;td,.table-striped tbody&gt;tr:nth-child(odd)&gt;th &#123; background-color: rgba(0, 0, 0, .05)&#125;.table-celled.table tr td,.table-celled.table tr th &#123; border-left: 1px solid #000&#125;.table-celled.table tr td:first-child,.table-celled.table tr th:first-child &#123; border-left: none&#125;.mindmap_container &#123; text-align: center&#125;.xsj_mindmap_caption &#123; border-bottom: 1px solid #969896; color: #969896; padding: 10px&#125;.hljs,.hljs * &#123; overflow: visible !important&#125;body .xiaoshujiang_code &#123; border: 0; border-radius: 4px; font-size: 90%&#125;.xiaoshujiang_code ol &#123; margin-bottom: 0&#125;.xiaoshujiang_pre &#123; line-height: initial !important; word-break: break-word&#125;.xiaoshujiang_code_container pre &#123; margin: 0&#125;.xiaoshujiang_code_container.xiaoshujiang_code_chunk &#123; box-shadow: 0 0 0 1px #A3C293 inset, 0 0 0 0 transparent; margin: 1em 0; padding: 1em&#125;.xiaoshujiang_code_container.xiaoshujiang_code_chunk_hide_code &#123; box-shadow: initial; padding: initial initial 2em&#125;.xiaoshujiang_code_container .out_put &#123; box-shadow: 0 0 0 1px #A3C293 inset, 0 0 0 0 transparent; margin: 1em 0; background-color: #FCFFF5; padding: 1em&#125;.xiaoshujiang_code_container .out_put_error &#123; background-color: #FFF6F6; color: #9F3A38; margin: 1em 0; box-shadow: 0 0 0 1px #E0B4B4 inset, 0 0 0 0 transparent; padding: 1em&#125;.ol_linenums &#123; padding: 0; margin-left: 2em; border-left: 1px solid #000&#125;.li_linenum &#123; margin-left: .5em; list-style: none; counter-increment: lines 1&#125;.li_linenum.li_list_style &#123; list-style: inherit; margin-left: 5px&#125;.li_linenum:before,.li_linenum_before_span &#123; content: counter(lines, decimal); position: absolute; left: -3em; text-align: center; width: 2.5em; vertical-align: top&#125;.li_linenum_before_span_hide &#123; display: none&#125;.xiaoshujiang_code_container &#123; margin: 1em 0; position: relative; padding-bottom: 2em&#125;.xiaoshujiang_code_title_container &#123; font-size: 70%; opacity: .5&#125;.xiaoshujiang_code_title_container&gt;.xiaoshujiang_code_infos &#123; float: right&#125;.mark &#123; border: 0; background-color: rgba(222, 147, 95, .15); color: #de935f; padding: 2px 4px&#125;.line_mark &#123; border: 1px dashed #000; margin-top: 2px&#125;.xiaoshujiang_code .mark,code .mark &#123; border-radius: 0; font-size: initial; padding: initial&#125;a.attachment &#123; border: 1px solid #000; display: inline-block; padding: 5px; margin: 2px; min-width: 250px&#125;a.attachment i.fa &#123; font-size: 3em; float: left; margin-right: .2em&#125;a.attachment .filename &#123; vertical-align: top; text-align: left; font-weight: 700&#125;.flow-chart,.mermaid,.plot,.plot-image,.sequence-diagram,.story_image_container,.story_remote_resource_block,.video_container &#123; text-align: center&#125;a.attachment .filesize &#123; display: -webkit-box; display: -moz-box; display: -ms-flexbox; display: -webkit-flex; display: flex; opacity: .6; font-size: 80%; white-space: nowrap&#125;.story_image_container&gt;.story_image &#123; display: inline-block; position: relative; max-width: 100%&#125;.story_image_caption &#123; border-bottom: 1px solid #969896; display: inline-block; color: #969896; padding: 10px&#125;.story_image_blank_caption &#123; border-bottom: 0&#125;.story_image&gt;img &#123; border-radius: .3125em; box-shadow: 0 2px 4px 0 rgba(88, 110, 117, .4), 0 2px 10px 0 rgba(88, 110, 117, .5)&#125;.story_inline_image&gt;img &#123; vertical-align: bottom&#125;.task-list-item &#123; list-style: none&#125;.task-list-item.li_list_style &#123; list-style: inherit&#125;.task-list-item&gt;input &#123; margin: 0 0 0 -20px&#125;.video_container &#123; width: 100%; display: table; position: relative; padding-bottom: 56.25% !important&#125;.video_container iframe &#123; width: 100%; height: 100%; position: absolute; top: 0; left: 0; z-index: 1; vertical-align: middle&#125;.slideshare_container .inner &#123; position: relative; width: 100%&#125;.slideshare_container .inner iframe &#123; width: 100%; height: 100%; position: absolute; top: 0; bottom: 0; left: 0; right: 0&#125;.toc ul &#123; list-style-type: none&#125;em.cjk_emphasis &#123; font-style: normal; font-family: Georgia, "Times New Roman", Times, "楷体", "AR PL UKai CN", NSimSun, "Songti SC", SimSun, serif !important&#125;.plot,.plot-image &#123; min-height: 200px; min-width: 200px&#125;.story_align_left,.story_align_left .story_image_container &#123; text-align: left&#125;.story_align_right,.story_align_right .story_image_container &#123; text-align: right&#125;.story_align_center,.story_align_center .story_image_container &#123; text-align: center&#125;.story_align_justify,.story_align_justify .story_image_container &#123; text-align: justify&#125;.mathjax-container &#123; text-align: center&#125;div.mathjax &#123; max-width: 600px; margin: 0 auto; font-size: 14px&#125;.hljs &#123; border: 1px dashed #000&#125;.preview.html_preview &#123; max-width: 10in; margin: 0 auto&#125;@media print &#123; body &#123; font-size: 18px; word-wrap: break-word; word-break: break-word; background: initial; font-kerning: normal; text-rendering: geometricPrecision &#125; .xiaoshujiang_element.xsj_anchor &#123; position: absolute &#125; .story_image_container, tr &#123; page-break-inside: avoid &#125; .xsj_underline &#123; page-break-after: always; visibility: hidden &#125;&#125;]]></content>
      <categories>
        <category>小书匠config</category>
      </categories>
      <tags>
        <tag>小书匠theme</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[小书匠预览主题：]]></title>
    <url>%2Fblog%2F2023%2F08%2F%E5%B0%8F%E4%B9%A6%E5%8C%A0%E9%A2%84%E8%A7%88%E4%B8%BB%E9%A2%98%EF%BC%9A%2F</url>
    <content type="text"><![CDATA[路径 小书匠自定义css样式位置：${小书匠home}/app/css/preview/thems 代码body h1,p &#123; line-height: 1.6&#125;body,pre &#123; word-break: break-word&#125;.tag.label,.xsj_mindmap_caption,hr:after,kbd &#123; display: inline-block&#125;body,kbd &#123; color: #2f2f2f&#125;img,kbd &#123; vertical-align: middle&#125;address,dl &#123; margin-bottom: 20px&#125;blockquote p,ol ol,ol ul,ul ol,ul ul &#123; margin-bottom: 0&#125;address,blockquote small &#123; display: block; line-height: 20px&#125;address,blockquote small,dd,dt &#123; line-height: 20px&#125;.xiaoshujiang_pre,pre &#123; word-wrap: break-word; tab-size: 4; white-space: pre-wrap&#125;img,table &#123; max-width: 100%&#125;html &#123; font-size: 62.5%&#125;body &#123; font-family: 'Helvetica Neue', Helvetica, Tahoma, Arial, 'Hiragino Sans GB', STHeiti, "Microsoft YaHei", "微软雅黑", 'WenQuanYi Micro Hei', STXihei, "华文细黑", Heiti, "黑体", SimSun, "宋体", Song, sans-serif; font-size: 1.4rem; line-height: 1.33; font-weight: 100; word-wrap: break-word; letter-spacing: 0; word-spacing: .25em; /* background: linear-gradient(to bottom, #B721FF, #2AF598, #fec051, #FEE140, #FA709A); */ background-size: 100%; background-repeat: no-repeat; margin: 0&#125;body:before &#123; content: ''; position: fixed; top: 0; bottom: 0; width: 100%; z-index: -1; /* background: linear-gradient(to right bottom, rgba(255, 255, 255, .2), #21D4FD 75%) */&#125;.li_linenum,.xiaoshujiang_code.hljs.code_linenums,code.hljs.code_linenums,hr:after &#123; position: relative&#125;a:focus &#123; outline: #ff7f0e dotted thin; outline: -webkit-focus-ring-color auto 5px; outline-offset: -2px&#125;a:active,a:hover &#123; outline: 0&#125;a &#123; color: #ff7f0e; text-decoration: none&#125;a:hover &#123; text-decoration: underline&#125;h1,h2,h3,h4,h5,h6 &#123; margin: 1em 0 .6em; font-family: inherit; font-weight: 500; line-height: 2.35rem; color: #2ca02c; text-rendering: optimizelegibility&#125;.mermaid_svg,.xiaoshujiang_pre,pre &#123; font-family: monospace&#125;h1 &#123; font-size: 3.4rem&#125;h2 &#123; font-size: 3rem&#125;h3 &#123; font-size: 2.45rem&#125;h4 &#123; font-size: 2.1rem&#125;h5 &#123; font-size: 1.9rem&#125;h6 &#123; font-size: 1.5rem&#125;body h2,body h3 &#123; line-height: 1.1&#125;hr &#123; margin: 20px 0; border: 0; border-top: 1px dashed #2f2f2f; border-left: 90px solid transparent; border-right: 90px solid transparent; text-align: center; overflow: visible&#125;hr:after &#123; content: "§"; top: -.7em; font-size: 1.5em; padding: 0 .25em; background: #fff&#125;p &#123; margin: 0 0 1.1em&#125;pre &#123; line-height: initial !important&#125;kbd &#123; padding: 3px 5px; font-size: 11px; line-height: 10px; background-color: #fcfcfc; border: 1px solid #2f2f2f; border-bottom-color: #2f2f2f; border-radius: 3px; box-shadow: inset 0 -1px 0 #2f2f2f&#125;address &#123; font-style: normal&#125;img &#123; height: auto; border: 0&#125;table &#123; background-color: transparent; border-collapse: collapse; border-spacing: 0; word-break: initial; border: 1px solid rgba(34, 36, 38, .15)&#125;small &#123; font-size: 85%&#125;dt,strong &#123; font-weight: 700&#125;em &#123; font-style: italic&#125;cite &#123; font-style: normal&#125;ol,ul &#123; padding: 0; margin: 0 0 10px 35px&#125;dd &#123; margin-left: 10px&#125;body dd,body dt &#123; line-height: 1.35em&#125;abbr[data-original-title],abbr[title] &#123; cursor: help; border-bottom: 1px dotted #999&#125;blockquote &#123; padding: 0 0 0 15px; margin: 0 0 20px; border-left: 10px solid rgba(254, 225, 64, .8); background: rgba(254, 225, 64, .3)&#125;blockquote p &#123; display: inline; font-size: 16px; font-weight: 300; line-height: 25px&#125;.table th,.tag.label &#123; font-weight: 700&#125;blockquote small &#123; color: #fee140&#125;blockquote small:before &#123; content: '\2014 \00A0'&#125;blockquote footer &#123; margin: 1em 0; font-style: italic&#125;blockquote footer cite &#123; margin: 0 1em&#125;code &#123; background-color: rgba(250, 112, 154, .13); color: #FA709A; border-radius: 4px; padding: 2px 4px&#125;body code &#123; border: 0; border-radius: 4px; font-size: 90%&#125;text &#123; font-size: 14px&#125;h1.story_title &#123; margin: .7em 0&#125;.story_tags &#123; margin: 0 0 1.2em&#125;.tag.label &#123; vertical-align: baseline; line-height: 1; margin: .125em; background-color: rgba(255, 127, 14, .1); border-color: rgba(255, 127, 14, .1); background-image: none; padding: .6em .8em; color: #ff7f0e; text-transform: none; border-radius: .2857rem; box-sizing: border-box; font-size: 12px&#125;.table &#123; width: 100%; margin-bottom: 20px; margin-right: auto; margin-left: auto&#125;.table td,.table th &#123; padding: 8px; line-height: 20px; text-align: left; vertical-align: top; border-top: 1px solid #ddd&#125;.table thead th &#123; vertical-align: bottom&#125;.table caption+thead tr:first-child td,.table caption+thead tr:first-child th,.table colgroup+thead tr:first-child td,.table colgroup+thead tr:first-child th,.table thead:first-child tr:first-child td,.table thead:first-child tr:first-child th &#123; border-top: 0&#125;.table tbody+tbody &#123; border-top: 2px solid #ddd&#125;.table .table &#123; background-color: #fff&#125;.table-striped tbody&gt;tr:nth-child(odd)&gt;td,.table-striped tbody&gt;tr:nth-child(odd)&gt;th &#123; background-color: #f9f9f9&#125;.table-celled.table tr td,.table-celled.table tr th &#123; border-left: 1px solid rgba(34, 36, 38, .1)&#125;.table-celled.table tr td:first-child,.table-celled.table tr th:first-child &#123; border-left: none&#125;.mindmap_container &#123; text-align: center&#125;.xsj_mindmap_caption &#123; border-bottom: 1px solid #d9d9d9; color: #999; padding: 10px&#125;.hljs,.hljs * &#123; overflow: visible !important&#125;body .xiaoshujiang_code &#123; border: 0; border-radius: 4px; font-size: 90%&#125;.xiaoshujiang_code ol &#123; margin-bottom: 0&#125;.xiaoshujiang_pre &#123; line-height: initial !important; word-break: break-word&#125;.xiaoshujiang_code_container pre &#123; margin: 0&#125;.xiaoshujiang_code_container.xiaoshujiang_code_chunk &#123; box-shadow: 0 0 0 1px #A3C293 inset, 0 0 0 0 transparent; margin: 1em 0; padding: 1em&#125;.xiaoshujiang_code_container.xiaoshujiang_code_chunk_hide_code &#123; box-shadow: initial; padding: initial initial 2em&#125;.xiaoshujiang_code_container .out_put &#123; box-shadow: 0 0 0 1px #A3C293 inset, 0 0 0 0 transparent; margin: 1em 0; background-color: #FCFFF5; padding: 1em&#125;.xiaoshujiang_code_container .out_put_error &#123; background-color: #FFF6F6; color: #9F3A38; margin: 1em 0; box-shadow: 0 0 0 1px #E0B4B4 inset, 0 0 0 0 transparent; padding: 1em&#125;.ol_linenums &#123; padding: 0; margin-left: 2em; border-left: 1px solid #e0e0e0&#125;.li_linenum &#123; margin-left: .5em; list-style: none; counter-increment: lines 1&#125;.li_linenum.li_list_style &#123; list-style: inherit; margin-left: 5px&#125;.li_linenum:before,.li_linenum_before_span &#123; content: counter(lines, decimal); position: absolute; left: -3em; text-align: center; width: 2.5em; vertical-align: top&#125;.li_linenum_before_span_hide &#123; display: none&#125;.xiaoshujiang_code_container &#123; margin: 1em 0; position: relative; padding-bottom: 2em&#125;.xiaoshujiang_code_title_container &#123; font-size: 70%; opacity: .5&#125;.xiaoshujiang_code_title_container&gt;.xiaoshujiang_code_infos &#123; float: right&#125;.mark &#123; border: 0; background-color: rgba(221, 243, 231, .4); color: #29754d; padding: 2px 4px&#125;.line_mark &#123; border: 1px dashed #2f2f2f; margin-top: 2px&#125;.xiaoshujiang_code .mark,code .mark &#123; border-radius: 0; font-size: initial; padding: initial&#125;a.attachment &#123; background-color: #ecf0f3; border: 1px solid #bec6cb; display: inline-block; padding: 5px; margin: 2px; min-width: 250px&#125;a.attachment i.fa &#123; font-size: 3em; float: left; margin-right: .2em&#125;a.attachment .filename &#123; vertical-align: top; text-align: left; font-weight: 700&#125;.flow-chart,.mermaid,.plot,.plot-image,.sequence-diagram,.story_image_container,.story_remote_resource_block,.video_container &#123; text-align: center&#125;a.attachment .filesize &#123; display: -webkit-box; display: -moz-box; display: -ms-flexbox; display: -webkit-flex; display: flex; opacity: .6; font-size: 80%; white-space: nowrap&#125;.story_image_container&gt;.story_image &#123; display: inline-block; position: relative; max-width: 100%&#125;.story_image_caption &#123; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 10px&#125;.story_image_blank_caption &#123; border-bottom: 0&#125;.story_image&gt;img &#123; border-radius: .3125em; box-shadow: 0 2px 4px 0 rgba(34, 36, 38, .12), 0 2px 10px 0 rgba(34, 36, 38, .08)&#125;.story_inline_image&gt;img &#123; vertical-align: bottom&#125;.task-list-item &#123; list-style: none&#125;.task-list-item.li_list_style &#123; list-style: inherit&#125;.task-list-item&gt;input &#123; margin: 0 0 0 -20px&#125;.video_container &#123; width: 100%; display: table; position: relative; padding-bottom: 56.25% !important&#125;.video_container iframe &#123; width: 100%; height: 100%; position: absolute; top: 0; left: 0; z-index: 1; vertical-align: middle&#125;.slideshare_container .inner &#123; position: relative; width: 100%&#125;.slideshare_container .inner iframe &#123; width: 100%; height: 100%; position: absolute; top: 0; bottom: 0; left: 0; right: 0&#125;.toc ul &#123; list-style-type: none&#125;em.cjk_emphasis &#123; font-style: normal; font-family: Georgia, "Times New Roman", Times, "楷体", "AR PL UKai CN", NSimSun, "Songti SC", SimSun, serif !important&#125;.plot,.plot-image &#123; min-height: 200px; min-width: 200px&#125;.story_align_left,.story_align_left .story_image_container &#123; text-align: left&#125;.story_align_right,.story_align_right .story_image_container &#123; text-align: right&#125;.story_align_center,.story_align_center .story_image_container &#123; text-align: center&#125;.story_align_justify,.story_align_justify .story_image_container &#123; text-align: justify&#125;.mathjax-container &#123; text-align: center&#125;div.mathjax &#123; max-width: 600px; margin: 0 auto; font-size: 14px&#125;.preview.html_preview &#123; /* max-width: 10in; */ background-color: #FFF; /* margin: 80px 10%; */ padding: 30px 60px; /* border-radius: 20px; */ box-shadow: 0 3px 26px 0 rgba(0, 0, 0, .2)&#125;@media print &#123; html &#123; font-size: 12px &#125; body &#123; word-wrap: break-word; word-break: break-word; background: initial; font-kerning: normal; text-rendering: geometricPrecision &#125; body:before &#123; content: unset; position: fixed; top: 0; bottom: 0; width: 100%; z-index: -1; background: linear-gradient(to right bottom, rgba(255, 255, 255, .2), #21D4FD 75%) &#125; .preview.html_preview &#123; max-width: 10in; background-color: #FFF; margin: initial; padding: initial; border-radius: initial; box-shadow: initial &#125; .xiaoshujiang_element.xsj_anchor &#123; position: absolute &#125; .story_image_container, tr &#123; page-break-inside: avoid &#125; .xsj_underline &#123; page-break-after: always; visibility: hidden &#125;&#125;]]></content>
      <categories>
        <category>小书匠config</category>
      </categories>
      <tags>
        <tag>小书匠theme</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[idea-httpClient-token设置]]></title>
    <url>%2Fblog%2F2023%2F08%2Fidea-HttpClient-token%E8%AE%BE%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[idea HttpClient 设置token12345678910111213141516POST http://192.168.5.132/eap/eap/api/token/login/byLoginName.whitemeshaccept: application/jsonContent-Type: application/json&#123; "addAuditLog": "string", "clientInfo": "string", "loginName": "sjn"&#125;&gt; &#123;%client.log("client");var tokenId = response.body.match("\"tokenId\":\"(.*?)\"")[1];//使用全局变量存储tokenId，后面的请求使用&#123;&#123;tokenId&#125;&#125;获取client.global.set("tokenId", tokenId);%&#125;]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java面试上]]></title>
    <url>%2Fblog%2F2023%2F08%2Fjava%E9%9D%A2%E8%AF%95%E4%B8%8A%2F</url>
    <content type="text"><![CDATA[面向对象的特征抽象：抽象是将一类对象共同特征总结出来构造类的过程，包括数据抽象和行为抽象。抽象只关注对象有哪些属性和行为，不关心这些行为具体的细节继承：继承是从已有类得到继承信息构造新类的过程。提供继承信息的类是父类，得到继承信息的类是子类。继承让变化中的软件系统有了一定的延续性，同时继承也是封装程序中可变因素的重要手段。封装：通常认为封装是把数据和操作数据的方法绑定起来，对数据的访问只能通过已经定义的接口。封装就是隐藏一切可以隐藏的东西，只向外界提供最简单的编程接口。 访问修饰符的区别 同类 同包 子类 其他包 public √ √ √ √ protected √ √ √ × default √ √ × × private √ × × × String类型是最基本的数据类型吗答：String类型不是最基本的数据类型，基本数据类型有四类八种： 四类：整形，浮点型，逻辑性，字符型 八种：byte,short,int,long,float,double,boolean,char 默认的整形：int，默认的浮点型：double float f =3.4是否正确答：不正确，正确的写法为：float f = 3.4F,3.4是double类型的数据double→float会丢失精度，需要强转float f = (float)3.4。 short s1 = 1; s1 = s1 + 1;有错吗?short s1 = 1; s1 += 1;有错吗？答： 1是int类型，short类型加int类型的数据自动转换为int类型，把int类型的数据赋值给short类型，丢失精度，需要强制转换 ，s1+=1,包含隐式的强制转换，没错。 判断12345678910class AutoUnBoxingTest&#123; public void main(String[] args)&#123; Integer a = new Integer(3); Integer b = 3; int c = 3; System.out.println(a == b ); // false ,2个引用没有引用同一个对象 System.out.println(a == c ); // true,a自动拆箱为int类型再和c比较，比较的是值 &#125;&#125; 为什么不能根据返回类型区分重载答：如下两个方法： void f(){} int f(){ return 1;}只要编译器可以根据语境明确判断出语义，比如在int x = f();中，那么的确可以据此区分重载方法。不过，有时你并不关心方法的返回值，你想要的是方法调用的其他效果（这常被称为“为了副作用而调用”），这时你可能会调用方法而忽略其返回值，所以如果像下面的调用： fun();此时Java如何才能判断调用的是哪一个 f() 呢？别人如何理解这种代码呢？所以，根据方法返回值来区分重载方法是行不通的。 java中有没有goto答：java中没有goto,goto是java中的保留字。 int和integer有什么区别答：java是一个近乎纯洁的面向对象编程语言，但是为了编程方便还是引入了基本数据类型。为了能像操作对象一样操作数据类型，java为每一个基本类型引入了包装类，Integer就是int的包装类。jdk5引入了自动装箱、自动拆箱机制，是的原始类型和包装类型可以相互转换。 基本类型：byte，short，int，long，double，float，char，boolean 包装类型：Byte，Short，Integer，Long，Double，Float，Character，Booean 知识点：整形字面量在-128~127之间，不会new新的Integer对象，而是会直接引用常量池中的对象。 switch(expr) 能否作用在byte上，能否作用在long上，能否作用在String上答： java5以前只能作用在byte，short，int，char上，java5引入了enum，expr也可以是enum，java7以后可以使String。长整型在所有版本都是不可以的。 数组有没有length方法，String有没有length方法答： 数组没有length方法，有length属性，字符串有length方法。 在java中如何跳出多重嵌套循环答： 最外层加标记A，用break A就能跳出循环，但是应该避免使用。 String是否可以继承答： String是final类，不可以被继承。 当一个对象被当作参数传递到一个方法后，此方法可改变这个对象的属性，并可返回变化后的结果，那么这里到底是值传递还是引用传递答： 是值传递，java中只有值传递，没有引用传递。 jvm加载Class类的机制答： JVM类的加载是由类加载器（ClassLoader）和它的子类实现的，JVM类加载器是一个 重要的java运行时组件，它负责在运行时查找和装入类文件中的类。 当java程序需要某个类时，JVM确保这个类被加载，连接和初始化。类的加载就是把 class文件读取到内存，通常是创建一个字节数组读入.class文件，创建Class对象。 加载完成后Class对象还不完整，此时类还不可用。接着进入连接阶段，这一阶段分 为验证，准备（为静态变量分配内存和初始化默认值），解析（将符号引用替换为直 接引用）。最后JVM对类进行初始化，包括： 1. 如果有直接的父类并且这个类还没有被初始化，那么就初始化父类， 2. 如果类中国处在初始化语句，就依次执行这些初始化语句 类加载器继承体系： Bootstrap：一般用本地代码实现，负责加载JVM基础核心类库（rt.jar）； Extension：从java.ext.dirs系统属性所指定的目录中加载类库，它的父加载器是Bootstrap； System：又叫应用类加载器，其父类是Extension。它是应用最广泛的类加载器。它从环境变量classpath或者系统属性java.class.path所指定的目录中记载类，是用户自定义加载器的默认父加载器。]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java面试题下]]></title>
    <url>%2Fblog%2F2023%2F08%2Fjava%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B8%8B%2F</url>
    <content type="text"><![CDATA[转发（forward）和重定向（redirect）的区别 答：转发地址栏url不会改变，是服务期内控制权的转向，重定向地址栏url会改变，服务器发送新的地址给浏览器，浏览器对新地址发起新的请求。 jsp有几个对象，分别有什么作用答：jsp有9个对象，作用见下表： 对象 作用 request 封装客户端的请求，其中包含孩子GET或者POST请求的参数 response 封装服务器端对客户端的响应 session 封装用户会话对象 pageContext 通过该对象可以获取其他对象 application 封装服务器运行环境的对象 out 输出服务器响应的输出流对象 exception 封装页面跑出的异常 page jsp页面本身（详单与java程序中的this） config web应用的配置对象 get请求和post请求的区别答： get请求参数以key=value的形式跟在url后面，post请求的参数根据http协议放在请求头或者请求体中 get请求受浏览器限制，参数长度只能传递有线的数据（1024），post请求传递参数大小无限制 get请求一般用来向服务器获取数据，post请求一般用来向服务器提交数据 jsp和servlet的区别答： jsp侧重视图展示，servlet侧重逻辑控制 jsp是简易的servlet，jsp会被服务器转换为.java文件]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java面试中]]></title>
    <url>%2Fblog%2F2023%2F08%2Fjava%E9%9D%A2%E8%AF%95%E4%B8%AD%2F</url>
    <content type="text"><![CDATA[什么是java虚拟机，为什么java被称作与平台无关的语言。答：java虚拟机是可以运行java字节码文件的虚拟机进程。因为java虚拟机，java实现了一次编译处处运行。 JDK和JRE的区别是什么？答：Java运行时环境(JRE)。它包括Java虚拟机、Java核心类库和支持文件。它不包含开发工具（JDK）–编译器、调试器和其他工具。Java开发工具包(JDK)是完整的Java软件开发包，包含了JRE，编译器和其他的工具(比如：JavaDoc，Java调试器)，可以让开发者开发、编译、执行Java应用程序。 ”static”关键字是什么意思？Java中是否可以覆盖(override)一个private或者是static的方法？答：“static”关键字表明一个成员变量或者是成员方法可以在没有所属的类的实例变量的情况下被访问。Java中static方法不能被覆盖，因为方法覆盖是基于运行时动态绑定的，而static方法是编译时静态绑定的。static方法跟类的任何实例都不相关，所以概念上不适用。java中也不可以覆盖private的方法，因为private修饰的变量和方法只能在当前类中使用，如果是其他的类继承当前类是不能访问到private变量或方法的，当然也不能覆盖。 是否可以在static环境中访问非static变量？答：static变量在Java中是属于类的，它在所有的实例中的值是一样的。当类被Java虚拟机载入的时候，会对static变量进行初始化。如果你的代码尝试不用实例来访问非static的变量，编译器会报错，因为这些变量还没有被创建出来，还没有跟任何实例关联上。 Java支持的数据类型有哪些？什么是自动拆装箱？ Java语言支持的8种基本数据类型是：byteshortintlongfloatdoublebooleanchar自动装箱是Java编译器在基本数据类型和对应的对象包装类型之间做的一个转化。比如：把int转化成Integer，double转化成Double，等等。反之就是自动拆箱。Java支持的数据类型包括两种：一种是基本数据类型，包含byte，char,short, boolean ,int , long, float,double;另一种是引用类型：如String等，其实是对象的引用，JVM中虚拟栈中存的是对象的地址，创建的对象实质在堆中，通过地址来找到堆中的对象的过程，即为引用类型。自动装箱就是Java编译器在基本数据类型和对应的对象包装类型间的转化，即int转化为Integer,自动拆箱是Integer调用其方法将其转化为int的过程 Java中的方法覆盖(Overriding)和方法重载(Overload)是什么意思？ Java中的方法重载发生在同一个类里面两个或者是多个方法的方法名相同但是参数不同的情况。与此相对，方法覆盖是说子类重新定义了父类的方法。方法覆盖必须有相同的方法名，参数列表和返回类型。覆盖者可能不会限制它所覆盖的方法的访问。 Java中，什么是构造方法？什么是构造方法重载？什么是复制构造方法？ 当新对象被创建的时候，构造方法会被调用。每一个类都有构造方法。在程序员没有给类提供构造方法的情况下，Java编译器会为这个类创建一个默认的构造方法。Java中构造方法重载和方法重载很相似。可以为一个类创建多个构造方法。每一个构造方法必须有它自己唯一的参数列表。Java不支持像C++中那样的复制构造方法，这个不同点是因为如果你不自己写构造方法的情况下，Java不会创建默认的复制构造方法。 Java支持多继承么？ Java中类不支持多继承，只支持单继承（即一个类只有一个父类）。 但是java中的接口支持多继承，，即一个子接口可以有多个父接口。（接口的作用是用来扩展对象的功能，一个子接口继承多个父接口，说明子接口扩展了多个功能，当类实现接口时，类就扩展了相应的功能） 接口和抽象类的区别是什么？ Java提供和支持创建抽象类和接口。它们的实现有共同点，不同点在于：接口中所有的方法隐含的都是抽象的。而抽象类则可以同时包含抽象和非抽象的方法。类可以实现很多个接口，但是只能继承一个抽象类类可以不实现抽象类和接口声明的所有方法，当然，在这种情况下，类也必须得声明成是抽象的。抽象类可以在不提供接口方法实现的情况下实现接口。Java接口中声明的变量默认都是final的。抽象类可以包含非final的变量。Java接口中的成员函数默认是public的。抽象类的成员函数可以是private，protected或者是public。接口是绝对抽象的，不可以被实例化，抽象类也不可以被实例化。也可以参考JDK8中抽象类和接口的区别 什么是值传递和引用传递？ 值传递是对基本型变量而言的,传递的是该变量的一个副本,改变副本不影响原变量.引用传递一般是对于对象型变量而言的,传递的是该对象地址的一个副本, 并不是原对象本身 。一般认为,java内的基础类型数据传递都是值传递. java中实例对象的传递是引用传递 进程和线程的区别是什么？ 程是执行着的应用程序，而线程是进程内部的一个执行序列。一个进程可以有多个线程。线程又叫做轻量级进程。线程与进程的区别归纳：a.地址空间和其它资源：进程间相互独立，同一进程的各线程间共享。某进程内的线程在其它进程不可见。b.通信：进程间通信IPC，线程间可以直接读写进程数据段（如全局变量）来进行通信——需要进程同步和互斥手段的辅助，以保证数据的一致性。c.调度和切换：线程上下文切换比进程上下文切换要快得多。d.在多线程OS中，进程不是一个可执行的实体。 概括的解释下线程的几种可用状态。 新建( new )：新创建了一个线程对象。 可运行( runnable )：线程对象创建后，其他线程(比如 main 线程）调用了该对象 的 start ()方法。该状态的线程位于可运行线程池中，等待被线程调度选中，获 取 cpu 的使用权 。 运行( running )：可运行状态( runnable )的线程获得了 cpu 时间片（ timeslice ） ，执行程序代码。 阻塞( block )：阻塞状态是指线程因为某种原因放弃了 cpu 使用权，也即让出了 cpu timeslice ，暂时停止运行。直到线程进入可运行( runnable )状态，才有 机会再次获得 cpu timeslice 转到运行( running )状态。阻塞的情况分三种：(一). 等待阻塞：运行( running )的线程执行 o . wait ()方法， JVM 会把该线程放 入等待队列( waitting queue )中。(二). 同步阻塞：运行( running )的线程在获取对象的同步锁时，若该同步锁 被别的线程占用，则 JVM 会把该线程放入锁池( lock pool )中。(三). 其他阻塞: 运行( running )的线程执行 Thread . sleep ( long ms )或 t . join ()方法，或者发出了 I / O 请求时， JVM 会把该线程置为阻塞状态。 当 sleep ()状态超时、 join ()等待线程终止或者超时、或者 I / O 处理完毕时，线程重新转入可运行( runnable )状态。 死亡( dead )：线程 run ()、 main () 方法执行结束，或者因异常退出了 run ()方法，则该线程结束生命周期。死亡的线程不可再次复生。 同步方法和同步代码块的区别是什么？ 区别：同步方法默认用this或者当前类class对象作为锁；同步代码块可以选择以什么来加锁，比同步方法要更细颗粒度，我们可以选择只同步会发生同步问题的部分代码而不是整个方法；同步方法使用关键字 synchronized修饰方法，而同步代码块主要是修饰需要进行同步的代码，用 synchronized（object）{代码内容}进行修饰； 在监视器(Monitor)内部，是如何做线程同步的？程序应该做哪种级别的同步？ 监视器和锁在Java虚拟机中是一块使用的。监视器监视一块同步代码块，确保一次只有一个线程执行同步代码块。每一个监视器都和一个对象引用相关联。线程在获取锁之前不允许执行同步代码。 什么是死锁(deadlock)？ 所谓死锁是指多个进程因竞争资源而造成的一种僵局（互相等待），若无外力作用，这些进程都将无法向前推进。死锁产生的4个必要条件：互斥条件：进程要求对所分配的资源（如打印机）进行排他性控制，即在一段时间内某 资源仅为一个进程所占有。此时若有其他进程请求该资源，则请求进程只能等待。不剥夺条件：进程所获得的资源在未使用完毕之前，不能被其他进程强行夺走，即只能 由获得该资源的进程自己来释放（只能是主动释放)。请求和保持条件：进程已经保持了至少一个资源，但又提出了新的资源请求，而该资源 已被其他进程占有，此时请求进程被阻塞，但对自己已获得的资源保持不放。循环等待条件：存在一种进程资源的循环等待链，链中每一个进程已获得的资源同时被 链中下一个进程所请求。 Java集合类框架的基本接口有哪些？ Collection：代表一组对象，每一个对象都是它的子元素。Set：不包含重复元素的Collection。List：有顺序的collection，并且可以包含重复元素。Map：可以把键(key)映射到值(value)的对象，键不能重复。]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jmeter简单使用]]></title>
    <url>%2Fblog%2F2023%2F08%2Fjmeter%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[jmeter测试计划包含动态获取token信息，绕过登陆测试接口]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>jmeter</tag>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux文件权限]]></title>
    <url>%2Fblog%2F2023%2F08%2Flinux%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%2F</url>
    <content type="text"><![CDATA[linux中文件修改文件权限 chown：修改文件拥有者 chmod：修改文件权限 chgrp：修改文件群组 使用示例：1234chgrp 群组 filenamechown 账号名称 文件或者目录chown 账号名称:组名 文件或者目录chomod xyz 文件或目录 命令 chmod ugoa +(加入)-(出去)=(设定) rwx 文件或者目录 使用范例：1chmod u=rwx,g=rw,o=rx filename linux 中文件的预设权限umask就是指定【目前用户在新建文件或目录的时候的权限默认值】查看：12umask umask -S 设置：设置其他用户新建的文件或者目录没有wx权限1umask 003 umask 后面跟上需要去掉的权限 在预设情况下，root的umask会拿掉比较多的属性，root用户的umask 的值是：022，一般用户的umask的值：002即保留同群组的写入权利。关于umask的设定可以参考/etc/bashrc这个文件的内容。]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>权限</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux文件查看命令]]></title>
    <url>%2Fblog%2F2023%2F08%2Flinux%E6%96%87%E4%BB%B6%E6%9F%A5%E7%9C%8B%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[文件查看 cat：由第一行开始显示文件内容 tac：从最后一行开始显示 nl：显示的时候顺道输出行号 more：一页一页显示文件内容 less：与more类似，但是比more更好的是，他可以往前翻页 head：只看头几行 tail：只看尾巴几行 od：以二进制的方式读取文件内容 more space空格键：向下翻一页 enter键：向下翻一行 /：搜索字符串 q：退出more :f：立即显示出文件名以及目前显示的行数 b获取[ctrl]+b：代表往回翻页，只对文件游泳有用，对管线无用 less space空格键：向下翻一页 [pagedown]：向下翻一页 [pageup]：想杀给你翻一页 /：搜索字符串 ?：向上搜索 q：退出more g：到文件的第一行 G：到文件最后一行 b获取[ctrl]+b：代表往回翻页，只对文件游泳有用，对管线无用 tail head1tail -n [number] -f -n number 输出number行-f 持续侦测文件]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>文件查看</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jdk版本与spring版本不匹配问题]]></title>
    <url>%2Fblog%2F2023%2F08%2Fjdk%E7%89%88%E6%9C%AC%E4%B8%8Espring%E7%89%88%E6%9C%AC%E4%B8%8D%E5%8C%B9%E9%85%8D%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[问题在项目中使用spring框架是3.1,jdk版本为1.8,使用1.8新特性lambda表达式，项目启动报错。示例代码：1234567891011121314151617181920// 排序Collections.sort(beans, (IConfiguration bean1, IConfiguration bean2) -&gt; &#123; // 2.1获取注解Order的值 Integer orderValue1 = getOrderValue(bean1); Integer orderValue2 = getOrderValue(bean2); // 2.2比较order的value值 int result = orderValue1.compareTo(orderValue2); // 2.2.1如果值相等,根据名称比较 if (result == 0) &#123; String name1 = nameBeanMap.get(bean1); String name2 = nameBeanMap.get(bean2); // 2.2.1.1如果名称为null ,返回-1 if (name1 == null) &#123; result = -1; &#125; // 2.2.1.2返回名称比较的值 result = name1.compareTo(name2); &#125; return result;&#125;); 解决方案 降低jdk版本到1.7 升级spring版本到4.x以上 不使用jdk1.8的新特性错误日志123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139严重: Exception sending context initialized event to listener instance of class com.sysware.p2m.core.env.P2MContextLoaderListenerorg.springframework.beans.factory.BeanDefinitionStoreException: Failed to read candidate component class: file [D:\ide-workspace\P2M.PURE\WebRoot\WEB-INF\classes\com\sysware\p2m\core\config\impl\ConfigReaderWriterImpl.class]; nested exception is java.lang.ArrayIndexOutOfBoundsException: 15983 at org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider.findCandidateComponents(ClassPathScanningCandidateComponentProvider.java:260) at org.springframework.context.annotation.ClassPathBeanDefinitionScanner.doScan(ClassPathBeanDefinitionScanner.java:242) at org.springframework.context.annotation.ComponentScanBeanDefinitionParser.parse(ComponentScanBeanDefinitionParser.java:84) at org.springframework.beans.factory.xml.NamespaceHandlerSupport.parse(NamespaceHandlerSupport.java:73) at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1419) at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1409) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.parseBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:184) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.doRegisterBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:140) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.registerBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:111) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:493) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:390) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:334) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:302) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:174) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:209) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:180) at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:125) at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:94) at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:131) at org.springframework.context.support.AbstractApplicationContext.obtainFreshBeanFactory(AbstractApplicationContext.java:522) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:436) at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:384) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:283) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:111) at com.sysware.p2m.core.env.P2MContextLoaderListener.contextInitialized(P2MContextLoaderListener.java:22) at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:5157) at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5680) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:145) at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:1017) at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:993) at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:652) at org.apache.catalina.startup.HostConfig.manageApp(HostConfig.java:1900) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at org.apache.tomcat.util.modeler.BaseModelMBean.invoke(BaseModelMBean.java:301) at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:819) at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:801) at org.apache.catalina.mbeans.MBeanFactory.createStandardContext(MBeanFactory.java:619) at org.apache.catalina.mbeans.MBeanFactory.createStandardContext(MBeanFactory.java:566) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at org.apache.tomcat.util.modeler.BaseModelMBean.invoke(BaseModelMBean.java:301) at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:819) at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:801) at javax.management.remote.rmi.RMIConnectionImpl.doOperation(RMIConnectionImpl.java:1468) at javax.management.remote.rmi.RMIConnectionImpl.access$300(RMIConnectionImpl.java:76) at javax.management.remote.rmi.RMIConnectionImpl$PrivilegedOperation.run(RMIConnectionImpl.java:1309) at javax.management.remote.rmi.RMIConnectionImpl.doPrivilegedOperation(RMIConnectionImpl.java:1401) at javax.management.remote.rmi.RMIConnectionImpl.invoke(RMIConnectionImpl.java:829) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:357) at sun.rmi.transport.Transport$1.run(Transport.java:200) at sun.rmi.transport.Transport$1.run(Transport.java:197) at java.security.AccessController.doPrivileged(Native Method) at sun.rmi.transport.Transport.serviceCall(Transport.java:196) at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:568) at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:826) at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:683) at java.security.AccessController.doPrivileged(Native Method) at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:682) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at java.lang.Thread.run(Thread.java:748)Caused by: java.lang.ArrayIndexOutOfBoundsException: 15983 at org.springframework.asm.ClassReader.&lt;init&gt;(Unknown Source) at org.springframework.asm.ClassReader.&lt;init&gt;(Unknown Source) at org.springframework.asm.ClassReader.&lt;init&gt;(Unknown Source) at org.springframework.core.type.classreading.SimpleMetadataReader.&lt;init&gt;(SimpleMetadataReader.java:48) at org.springframework.core.type.classreading.SimpleMetadataReaderFactory.getMetadataReader(SimpleMetadataReaderFactory.java:80) at org.springframework.core.type.classreading.CachingMetadataReaderFactory.getMetadataReader(CachingMetadataReaderFactory.java:101) at org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider.findCandidateComponents(ClassPathScanningCandidateComponentProvider.java:236) ... 69 more四月 17, 2019 9:26:33 上午 org.apache.catalina.core.ApplicationContext log信息: Closing Spring root WebApplicationContext四月 17, 2019 9:26:33 上午 org.apache.catalina.core.StandardContext listenerStop严重: Exception sending context destroyed event to listener instance of class com.sysware.p2m.core.env.P2MContextLoaderListenerjava.lang.IllegalStateException: BeanFactory not initialized or already closed - call &apos;refresh&apos; before accessing beans via the ApplicationContext at org.springframework.context.support.AbstractRefreshableApplicationContext.getBeanFactory(AbstractRefreshableApplicationContext.java:172) at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1066) at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1040) at org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:988) at org.springframework.web.context.ContextLoader.closeWebApplicationContext(ContextLoader.java:541) at org.springframework.web.context.ContextLoaderListener.contextDestroyed(ContextLoaderListener.java:142) at org.apache.catalina.core.StandardContext.listenerStop(StandardContext.java:5204) at org.apache.catalina.core.StandardContext.stopInternal(StandardContext.java:5877) at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:221) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:149) at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:1017) at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:993) at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:652) at org.apache.catalina.startup.HostConfig.manageApp(HostConfig.java:1900) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at org.apache.tomcat.util.modeler.BaseModelMBean.invoke(BaseModelMBean.java:301) at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:819) at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:801) at org.apache.catalina.mbeans.MBeanFactory.createStandardContext(MBeanFactory.java:619) at org.apache.catalina.mbeans.MBeanFactory.createStandardContext(MBeanFactory.java:566) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at org.apache.tomcat.util.modeler.BaseModelMBean.invoke(BaseModelMBean.java:301) at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:819) at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:801) at javax.management.remote.rmi.RMIConnectionImpl.doOperation(RMIConnectionImpl.java:1468) at javax.management.remote.rmi.RMIConnectionImpl.access$300(RMIConnectionImpl.java:76) at javax.management.remote.rmi.RMIConnectionImpl$PrivilegedOperation.run(RMIConnectionImpl.java:1309) at javax.management.remote.rmi.RMIConnectionImpl.doPrivilegedOperation(RMIConnectionImpl.java:1401) at javax.management.remote.rmi.RMIConnectionImpl.invoke(RMIConnectionImpl.java:829) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:357) at sun.rmi.transport.Transport$1.run(Transport.java:200) at sun.rmi.transport.Transport$1.run(Transport.java:197) at java.security.AccessController.doPrivileged(Native Method) at sun.rmi.transport.Transport.serviceCall(Transport.java:196) at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:568) at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:826) at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:683) at java.security.AccessController.doPrivileged(Native Method) at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:682) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at java.lang.Thread.run(Thread.java:748)]]></content>
      <categories>
        <category>jdk版本</category>
      </categories>
      <tags>
        <tag>jdk1.8</tag>
        <tag>spring3.1</tag>
        <tag>版本匹配</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[nginx在Windows下的命令]]></title>
    <url>%2Fblog%2F2023%2F08%2Fnginx%E5%9C%A8Windows%E4%B8%8B%E7%9A%84%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[常用命令启动1start nginx 验证配置文件1nginx -t 停止12nginx -s stop //暴力停止nginx -s quit //平缓的停止 重新加载配置1nginx -s reload 指定配置文件1nginx -c d:/conf/nginx.conf]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[oracle层级排序查询]]></title>
    <url>%2Fblog%2F2023%2F08%2Foracle%E5%B1%82%E7%BA%A7%E6%8E%92%E5%BA%8F%E6%9F%A5%E8%AF%A2%2F</url>
    <content type="text"><![CDATA[问题oracle+层级查询显示错误 据错误排序 1 1.1 1.1.1 1.10 1.11 1.2 1.3 1.5 2.1 2.2期望的正确排序 1 1.1 1.1.1 1.2 1.3 1.5 2.1 1.10 1.11 2.1 2.2 分析排序错误主要是因为类似1.10 和1.2这样的数据排序错误 思路小数点之间的每一个位上的数，不足4位的前面补零eg: 原始数据 补零后的数据 1 0001 1.1 0001.0001 1.1.1 0001.0001.0001 1.2 0001.0002 1.10 0001.0010 SQL12345678order by regexp_replace( regexp_replace( regexp_replace( regexp_replace(t.wbscode,'(^|\.)(\d&#123;4&#125;)','\1 \2'), '(^|\.)(\d&#123;3&#125;)','\1 0\2'), '(^|\.)(\d&#123;2&#125;)','\1 00\2') , '(^|\.)(\d)','\1 000\2') ,]]></content>
      <categories>
        <category>问题</category>
        <category>sql</category>
      </categories>
      <tags>
        <tag>oracle</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[redis基础命令]]></title>
    <url>%2Fblog%2F2023%2F08%2Fredis%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[redis命令中心 redis数据类型 字符串（strings) 列表(lists) 集合(sets) 有序集合(sorted sets) 哈希(hashes) string命令set key value get key 1234567891011121314151617127.0.0.1:6379&gt; set name yhbOK127.0.0.1:6379&gt; get name"yhb"127.0.0.1:6379&gt; set mystr 'hello world'OK127.0.0.1:6379&gt; get mystr"hello world"127.0.0.1:6379&gt; set num 1OK127.0.0.1:6379&gt; get num"1"127.0.0.1:6379&gt; incr num(integer) 2127.0.0.1:6379&gt; get num"2" lists命令 添加 lpush key value 添加 rpush key value 获取列表数据 lrange key start end sets命令 添加数据 sadd key value 查看key smembers key 查看key是否存在，不存在返回0 sismember key value sortedsets命令 添加数据 zadd key index value 获取集合中的数据 zrange key start end hashes 命令 获取哈希表中key对应的数据 hgetall key 设置数据 hset key field value 设置数据 hmset key field value 获取数据 hget key field]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[spring-boot属性加载相关]]></title>
    <url>%2Fblog%2F2023%2F08%2Fspring-boot%E5%B1%9E%E6%80%A7%E5%8A%A0%E8%BD%BD%E7%9B%B8%E5%85%B3%2F</url>
    <content type="text"><![CDATA[配置文件加载位置及顺序内部配置文件以下列表按加载的优先级排列 当前目录下的/config子目录。 当前目录。 classpath下的/config包。 classpath根路径（root）。 外部配置文件项目外部的配置文件可以再启动前加jvm参数进行加载1$ java -jar myproject.jar --spring.config.location=classpath:/default.properties,classpath:/override.properties 激活profile激活固定的配置段，可以卸载配置文件中，也可以已commandline设置1spring.profiles.active=test/dev/product/... 配置文件属性的Relaxed绑定（松散） 特性 @ConfigurationProperties @Value Relaxed绑定 yes no Meta-data绑定 yes no SpEL表达式 yes 松散绑定属性命名说明 属性 说明 person.firstName 标准驼峰规则 person.first-name 虚线表示，推荐用于.properties和.yml文件中 person.first_name 下划线表示，用于.properties和.yml文件的可选格式 PERSON_FISRT_NAME 系统环境变量]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTML5学习笔记]]></title>
    <url>%2Fblog%2F2023%2F08%2FHTML5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[什么是HTML5 HTML5是Web中核心语言HTML的规范，用户使用任何手段进行网页浏览时看到的内容原本都是HTML格式的，在浏览器中通过一些技术处理将其转换成为了可识别的信息。HTML5在从前HTML4.01的基础上进行了一定的改进，虽然在技术人员在开发过程中可能不会将这些新技术投入应用，但是对于该种技术的新特性网站开发技术人员是必须要有所了解的。 HTML5就HTML(超文本标记语言的新版本)。 HTML5和HTML4有什么不同 新增了部分标签 弃用了一些标签 1234567891011121314151617181920212223242526272829303132333435363738394041&lt;!--HTML5版本--&gt;&lt;!--html:5 + Tab--&gt;&lt;!doctype html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;&lt;!--html:xt + Tab--&gt;&lt;!--过渡版本--&gt;&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;&lt;html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"&gt;&lt;head&gt; &lt;meta http-equiv="Content-Type" content="text/html;charset=UTF-8"&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;&lt;!--html:4s + Tab--&gt;&lt;!--html4标准版本--&gt;&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta http-equiv="Content-Type" content="text/html;charset=UTF-8"&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; HTML5新增的语义标签（常用） 标签 语义 \&lt;header> 头部，不只是整个页面头部 \&lt;nav> 导航 \&lt;main> 主体 \&lt;article> 主题 \&lt;aside> 非主题外的侧边栏 \&lt;footer> 底部，不只是页面的底部 示例：1234567891011121314151617&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;link rel="stylesheet" href="../css/continer.css"&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;header&gt;头部&lt;/header&gt;&lt;nav&gt;导航&lt;/nav&gt;&lt;main&gt; &lt;article&gt;左边&lt;/article&gt; &lt;aside&gt;右边&lt;/aside&gt;&lt;/main&gt;&lt;footer&gt;底部&lt;/footer&gt;&lt;/body&gt;&lt;/html&gt; css样式：123456789101112131415161718192021222324252627282930313233343536373839*&#123; padding: 0px; margin: 0px;&#125;header &#123; width: 100%; height: 100px; background-color: #a0ff5d;&#125;nav &#123; width: 100%; height: 50px; background-color: #4cd75a;&#125;main &gt; article &#123; width: 80%; height: 400px; background-color: #45af82; display: block; float: left;&#125;main &gt; aside &#123; width: 20%; height: 400px; background-color: rgba(167, 187, 71, 0.36); display: block; float: right;&#125;footer &#123; display: block; width: 100%; height: 100px; background-color: rgba(0, 0, 0, 0.53); float: left;&#125; HTML5新增的表单元标签input标签新增类型 标签 语义 email 增加了邮箱格式验证 tel 在APP端弹出数字键盘 number 只能输入数字,并且在右侧添加了加减箭头 date 年月日，会弹出日历控件 time 时分秒，可以选择时间 datetime 年月日时分秒，日期控件，只有safira浏览器支持 datetime-local 年月日时分秒，日期控件 新增标签:\&lt;datalist>,&lt;\meter> 示例：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;link rel="stylesheet" href="../css/formstyle.css"&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;form action=""&gt; &lt;fieldset&gt; &lt;legend&gt;登录表单&lt;/legend&gt; &lt;label for="userName"&gt;用户名:&lt;/label&gt; &lt;input type="text" id="userName" name="userName" placeholder="请输入用户名"&gt; &lt;label for="passWd"&gt;密码:&lt;/label&gt; &lt;input type="password" id="passWd" name="passWd"&gt; &lt;label for="email"&gt;邮箱:&lt;/label&gt; &lt;input type="email" id="email" name="email"&gt; &lt;label for="phnoe"&gt;电话:&lt;/label&gt; &lt;input type="tel" id="phnoe" name="phnoe" pattern="^0?(13|14|15|18|17)[0-9]&#123;9&#125;$" formnovalidate oninvalid="this.setCustomValidity('请输入正确的电话号码')"&gt; &lt;label for="zhuanye"&gt;专业&lt;/label&gt; &lt;input type="text" id="zhuanye" name="zhuanye" list="zhuanyeList"&gt; &lt;datalist id="zhuanyeList"&gt; &lt;option value="java" label="java使用者众多"&gt;&lt;/option&gt; &lt;option value="C" label="不知道干啥"&gt;&lt;/option&gt; &lt;option value="C++" label="不会"&gt;&lt;/option&gt; &lt;/datalist&gt; &lt;label for="score"&gt;成绩:&lt;/label&gt; &lt;input type="number" id="score" name="score" max="100" min="0" value="0"&gt; &lt;label&gt;水平&lt;/label&gt; &lt;meter id="scoreMeter" max="100" min="0" high="90" low="59"&gt;&lt;/meter&gt; &lt;label for="inTime"&gt;入学日期:&lt;/label&gt; &lt;input type="date" id="inTime" name="inTime"&gt; &lt;label for="leaveTime"&gt;离校日期:&lt;/label&gt; &lt;input type="date" id="leaveTime" name="leaveTime"&gt; &lt;input type="submit"&gt; &lt;/fieldset&gt;&lt;/form&gt;&lt;script&gt; window.onload = function () &#123; document.getElementById('score').onchange = function () &#123; document.getElementById("scoreMeter").value = this.value; &#125; &#125;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 123456789101112131415161718192021fieldset &#123; width: 50%; margin: 0 auto; padding: auto 10px;&#125;fieldset &gt; label&#123; font-size: 20px;&#125;fieldset &gt; meter,fieldset &gt; input &#123; width: 100%; height: 40px; line-height: 40px; display: block; border: none; border: 1px solid #CCCCcc; border-radius: 4px; padding: 10px auto; margin: 10px auto; font-size: 16px;&#125; HTML5新增视频音频标签\&lt;video>视频标签\&lt;audio>音频标签controls 播放控制面板autoplay 自动播放loop 循环 示例代码：123456789101112131415&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;video controls loop autoplay&gt; &lt;source src="" type="video/mp4"&gt; &lt;source src="" type="video/ftl"&gt; 浏览器不支持&lt;/video&gt;&lt;audio src="" autoplay loop controls&gt;&lt;/audio&gt;&lt;/body&gt;&lt;/html&gt;]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>html5</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTML5拖拽事件]]></title>
    <url>%2Fblog%2F2023%2F08%2FHTML5%E6%8B%96%E6%8B%BD%E4%BA%8B%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[HTML5 元素拖拽实现 拖拽： 拖放是一种常见的特性，即抓取对象以后拖到另一个位置。 步骤 设置元素可拖拽：draggable=true 拖动什么：ondragstart和setData 拖到哪儿：ondragover 进行放置：ondrop 例子：1234567891011121314151617181920212223242526272829303132333435363738394041&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;Title&lt;/title&gt; &lt;style&gt; div &#123; float: left; margin: 20px 20px; width: 300px; height: 300px; border: 1px solid #4cd75a; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div id="div1"&gt;&lt;/div&gt;&lt;div id="div2"&gt;&lt;p id="p_drag" draggable="true"&gt;试试把我拖过去&lt;/p&gt;&lt;/div&gt;&lt;script&gt; window.onload = function () &#123; document.ondragover = function (e) &#123; // 阻止浏览器的默认行为，浏览器默认不允许拖拽 e.preventDefault(); &#125;; document.ondragstart = function (e) &#123; // 拖拽开始事件，设置拖拽元素的id e.dataTransfer.setData("Text", e.target.id); &#125;; /** * 拖拽结束事件 * @param e */ document.ondrop = function (e) &#123; e.preventDefault() var id = e.dataTransfer.getData("Text"); e.target.appendChild(document.getElementById(id)) &#125; &#125;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 效果：]]></content>
      <categories>
        <category>HTML5</category>
      </categories>
      <tags>
        <tag>html5</tag>
        <tag>拖拽</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RabbitMQ 安装（ubuntu）]]></title>
    <url>%2Fblog%2F2023%2F08%2FRabbitMQ%20%E5%AE%89%E8%A3%85%EF%BC%88ubuntu%EF%BC%89%2F</url>
    <content type="text"><![CDATA[安装rabbitmq 1.由于rabbitMq需要erlang语言的支持，在安装rabbitMq之前需要安装erlang，执行命令 12apt-get install erlang-nox # 安装erlangerl # 查看erlang的版本 添加公匙 1wget -O- https://www.rabbitmq.com/rabbitmq-release-signing-key.asc | sudo apt-key add - 更新软件包 1apt-get update 安装RabittMQ 12apt-get install rabbitmq-server# 安装成功后自动启动 查看RabittMQ的状态 12systemctl status rabbitmq-server #Active: active (running) 说明处于运行状态# service rabbitmq-server status 用service指令也可以查看 启用WEb可视化操作界面 12rabbitmq-pluins enable rabbitmq_management # 启用插件service rabbitmq-server restart # 重启 此时，可以通过http://localhost:15672访问管理界面，用户名guest，密码guest需要注意的是：rabbitmq的guest用户只能在本机登录，建议新增用户，赋权操作 查看用户列表 1rabbitmqctl user_list 添加管理用户 1234rabbitmqctl add_user admin yourpassword # 创建普通用户rabbitmqctl set_user_tag admin administrator #给普通用户分配管理员角色rabbitmqctl set_permissions -p / admin .* .* .* # 给用户添加读写权限，如果不添加，项目启动后会报错：connection reset。如果这个命令执行错误，可以通过用户管理界面添加权限。 rabbitmq的启动重启终止命令123service rabbitmq-server startservice rabbitmq-server stopservice rabbitmq-server restart]]></content>
      <categories>
        <category>RabbitMQ</category>
      </categories>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hibernate-EventListener-下标越界]]></title>
    <url>%2Fblog%2F2023%2F08%2FHibernate-EventListener-%E4%B8%8B%E6%A0%87%E8%B6%8A%E7%95%8C%2F</url>
    <content type="text"><![CDATA[hibernate监听器使用hibernate监听器，监听实体类的变更，实现一些业务逻辑，hibernate在flush的时候报IndexOutOfBoundsException:index 1,size 0分析其原因：在监听器中有对实体类对应的数据库表的查询操作，应该是事务原因解决方案：在相关的查询操作的service接口上，添加注解1@Transactional(propagation = Propagation.REQUIRES_NEW) 把事务的传播行为设置为REQUIRES_NEW]]></content>
      <categories>
        <category>开发问题</category>
      </categories>
      <tags>
        <tag>hibernate</tag>
        <tag>异常</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Tomcat进程占用]]></title>
    <url>%2Fblog%2F2023%2F08%2FTomcat%E8%BF%9B%E7%A8%8B%E5%8D%A0%E7%94%A8%2F</url>
    <content type="text"><![CDATA[Tomcat进程占用解决方法1netstat -ano 找到进程的PID 1taskkill /f /pid]]></content>
      <categories>
        <category>tomcat</category>
      </categories>
      <tags>
        <tag>tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vscode-启动文件]]></title>
    <url>%2Fblog%2F2023%2F08%2FVscode-%E5%90%AF%E5%8A%A8%E6%96%87%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[vscode设置配置文件路径的脚本12345@echo offset VSCodePath=%~dp0\..\.VSCodeecho %VSCodePath%start code -n --user-data-dir "%VSCodePath%\data" --extensions-dir "%VSCodePath%\extension"exit 使用说明： 把这个脚本复制到vscode的根目录下 修改VSCodePath的值为想要设置的目录 发送快捷方式到桌面]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>bat</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[WebService客户端]]></title>
    <url>%2Fblog%2F2023%2F08%2FWebService%E5%AE%A2%E6%88%B7%E7%AB%AF%2F</url>
    <content type="text"><![CDATA[client使用jdk自带工具生成WebService客户端1wsimport -encoding utf-8 -keep -s ./src/main/java -p com.sysware.p2m.ws.client -d ./target/classes -verbose %wsdlurl% 参数：-encoding：生成文件编码-s：指定java源码的目录-p：指定代码的包名-d：指定class文件的目录-verbose： wsdl的url]]></content>
      <categories>
        <category>WebService</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>WebService</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[anaconda]]></title>
    <url>%2Fblog%2F2023%2F08%2Fanaconda%2F</url>
    <content type="text"><![CDATA[conda管理 验证系统conda版本 1conda --version 更新当前conda版本 1conda update conda 有可更新的版本，需要输入y确认更新 environment管理 创建一个新的env 1conda create --name snowflakes biopython 切换env环境Windowsactivate snowflakes```124.6版本之前的linux系统使用命令Linux``` source activate snowflakes 查看env环境的详细信息 1conda info --envs 输出信息： 1234conda environments: base /home/username/Anaconda3 snowflakes * /home/username/Anaconda3/envs/snowflakes 管理python 创建一个名称为snakes的python版本为3.5的环境 1conda create --names snakes python=3.5 验证python的版本 1python --version package管理 激活新建的环境 检查是否有需要的包 1conda search beautifulsoup4 安装 1conda install beautifulsoup4 显示package的列表1conda list]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>anaconda</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring-boot 整合 XStream的坑]]></title>
    <url>%2Fblog%2F2023%2F08%2FSpring-boot%20%E6%95%B4%E5%90%88%20XStream%E7%9A%84%E5%9D%91%2F</url>
    <content type="text"><![CDATA[在SpringBoot项目中使用XStream时，引发的问题xml配置文件：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;grids pageSize="20"&gt; &lt;grid id="activityAttributeGrid" processor="dataActivityAttribute" viewProcessor="viewActivityAttribute"&gt; &lt;sql&gt; &lt;!-- select e.* from engine_activity_attribute e where e.ACTIVITYID =:id --&gt; SELECT aa.* ,m.ACTIVITY_KEY mapping FROM ENGINE_ACTIVITY_ATTRIBUTE aa left JOIN ENGINE_TASKATTR_MAPPING m ON m.ACTIVITY_ID = aa.ACTIVITYID AND m.PROCESS_ID = aa.PROCESSID and m.TASKATTR_KEY = aa.key where aa.ACTIVITYID=:id &lt;/sql&gt; &lt;idProperty&gt;id&lt;/idProperty&gt; &lt;userIdProperty&gt;userId&lt;/userIdProperty&gt; &lt;queryParameter&gt; &lt;/queryParameter&gt; &lt;extraAttribute&gt; &lt;/extraAttribute&gt; &lt;fields&gt; &lt;field name="key" /&gt; &lt;field name="name" /&gt; &lt;field name="value" /&gt; &lt;field name="mark" /&gt; &lt;field name="mapping" /&gt; &lt;/fields&gt; &lt;columns&gt; &lt;column dataIndex="key" text="属性id" width="160" /&gt; &lt;column dataIndex="name" text="属性名称" width="160" /&gt; &lt;column dataIndex="value" text="值" width="160" /&gt; &lt;column dataIndex="mark" text="标记" width="160" /&gt; &lt;column dataIndex="mapping" text="映射值" width="160" /&gt; &lt;/columns&gt; &lt;tbar&gt; &lt;button id="activityAttribute_add" name="导入" iconCls="icon-new" /&gt; &lt;button id="activityAttribute_delete" name="删除" iconCls="icon-delete" /&gt; &lt;button id="activityAttribute_mark" name="标记" iconCls="icon-enable" /&gt; &lt;button id="activityAttribute_mapping" name="手动映射" iconCls="icon-feedback-title" /&gt; &lt;/tbar&gt; &lt;tbarMapping&gt; &lt;mapping buttonId="activityAttribute_add" operationId=""/&gt; &lt;mapping buttonId="activityAttribute_delete" operationId=""/&gt; &lt;mapping buttonId="activityAttribute_mark" operationId=""/&gt; &lt;mapping buttonId="activityAttribute_mapping" operationId=""/&gt; &lt;/tbarMapping&gt; &lt;script&gt; &lt;/script&gt; &lt;title&gt;流程活动关联属性&lt;/title&gt; &lt;toView&gt;/kernel/activityAttribute/activityAttributeMain&lt;/toView&gt; &lt;/grid&gt;&lt;/grids&gt; 定义的Java bean：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103package com.config.tools.system.service.loader.vo;import com.config.tools.common.utils.StringUtil;import com.thoughtworks.xstream.annotations.XStreamAlias;import com.thoughtworks.xstream.annotations.XStreamAsAttribute;import com.thoughtworks.xstream.annotations.XStreamImplicit;import com.thoughtworks.xstream.annotations.XStreamOmitField;import java.util.ArrayList;import java.util.List;@XStreamAlias("grids")public class GridConfigList &#123; @XStreamAlias("link") private GridCSS css; @XStreamAlias("script") private GridScript script; @XStreamAlias("processor") @XStreamAsAttribute private String processor;//数据的的processor @XStreamAlias("viewProcessor") @XStreamAsAttribute private String viewProcessor;//视图的processor @XStreamAlias("pageSize") @XStreamAsAttribute private String pageSize; @XStreamAlias("reloadable") @XStreamAsAttribute private String reloadable; @XStreamOmitField private String configFilePath;//配置文件的路径，在加载文件后设置 @XStreamImplicit private List&lt;GridConfig&gt; list = new ArrayList&lt;&gt;(); public String getProcessor() &#123; return StringUtil.trim(processor); &#125; public void setProcessor(String processor) &#123; this.processor = processor; &#125; public String getViewProcessor() &#123; return StringUtil.trim(viewProcessor); &#125; public void setViewProcessor(String viewProcessor) &#123; this.viewProcessor = viewProcessor; &#125; public List&lt;GridConfig&gt; getList() &#123; return list; &#125; public void setList(List&lt;GridConfig&gt; list) &#123; this.list = list; &#125; public GridCSS getCss() &#123; return css; &#125; public void setCss(GridCSS css) &#123; this.css = css; &#125; public GridScript getScript() &#123; return script; &#125; public void setScript(GridScript script) &#123; this.script = script; &#125; public String getPageSize() &#123; return StringUtil.trim(pageSize); &#125; public void setPageSize(String pageSize) &#123; this.pageSize = pageSize; &#125; public String getReloadable() &#123; return StringUtil.trim(reloadable); &#125; public void setReloadable(String reloadable) &#123; this.reloadable = reloadable; &#125; public String getConfigFilePath() &#123; return configFilePath; &#125; public void setConfigFilePath(String configFilePath) &#123; this.configFilePath = configFilePath; &#125;&#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432433434435436437438439440441442443444445446447448449450451452package com.config.tools.system.service.loader.vo;import com.config.tools.common.utils.StringUtil;import com.thoughtworks.xstream.annotations.XStreamAlias;import com.thoughtworks.xstream.annotations.XStreamAsAttribute;import java.io.Serializable;import java.util.HashMap;import java.util.Map;@XStreamAlias("grid")public class GridConfig implements Serializable &#123; /** * 参数前缀 */ public static final String ATTR_NAME_PREFIX = "syw_"; private static final long serialVersionUID = -3401563465013626979L; @XStreamAlias("id") @XStreamAsAttribute private String id; @XStreamAlias("processor") @XStreamAsAttribute private String processor;//数据的的processor @XStreamAlias("viewProcessor") @XStreamAsAttribute private String viewProcessor;//视图的processor @XStreamAlias("sql") private String sql; @XStreamAlias("parentSQL") private String parentSQL; @XStreamAlias("idProperty") private String idProperty; @XStreamAlias("attributeNamePrefix") private String attributeNamePrefix;//返回的配置的前缀 @XStreamAlias("userIdProperty") private String userIdProperty; @XStreamAlias("fields") private GridFields fields; @XStreamAlias("extraAttribute") private GridExtraAttribute extraAttribute; @XStreamAlias("queryParameter") private GridQueryParameter queryParameter; @XStreamAlias("columns") private GridColumns columns; @XStreamAlias("tbar") private GridToolBar tbar; @XStreamAlias("tbarMapping") private GridTbarMapping tbarMapping; @XStreamAlias("link") private GridCSS css; @XStreamAlias("script") private GridScript script; @XStreamAlias("title") private String title; @XStreamAlias("description") private String description; @XStreamAlias("toView") private String toView; @XStreamAlias("pageSize") @XStreamAsAttribute private String pageSize; private Map&lt;String, String&gt; columnsMap = null; private Map&lt;String, String&gt; mapFields = null; public String getId() &#123; return StringUtil.trim(id); &#125; public void setId(String id) &#123; this.id = id; &#125; public String getProcessor() &#123; return StringUtil.trim(processor); &#125; public void setProcessor(String processor) &#123; this.processor = processor; &#125; public String getSql() &#123; return StringUtil.trim(sql); &#125; public void setSql(String sql) &#123; this.sql = sql; &#125; public String getParentSQL() &#123; return StringUtil.trim(parentSQL); &#125; public void setParentSQL(String parentSQL) &#123; this.parentSQL = parentSQL; &#125; public GridFields getFields() &#123; return fields; &#125; public void setFields(GridFields fields) &#123; this.fields = fields; &#125; public String getIdProperty() &#123; return StringUtil.trim(idProperty); &#125; public void setIdProperty(String idProperty) &#123; this.idProperty = idProperty; &#125; public String getUserIdProperty() &#123; return StringUtil.trim(userIdProperty); &#125; public void setUserIdProperty(String userIdProperty) &#123; this.userIdProperty = userIdProperty; &#125; public GridColumns getColumns() &#123; return columns; &#125; public void setColumns(GridColumns columns) &#123; this.columns = columns; &#125; public GridToolBar getTbar() &#123; return tbar; &#125; public void setTbar(GridToolBar tbar) &#123; this.tbar = tbar; &#125; public GridCSS getCss() &#123; return css; &#125; public void setCss(GridCSS css) &#123; this.css = css; &#125; public GridScript getScript() &#123; return script; &#125; public void setScript(GridScript script) &#123; this.script = script; &#125; public String getTitle() &#123; return title; &#125; public void setTitle(String title) &#123; this.title = title; &#125; public String getViewProcessor() &#123; return viewProcessor; &#125; public void setViewProcessor(String viewProcessor) &#123; this.viewProcessor = viewProcessor; &#125; public String getToView() &#123; return toView; &#125; public void setToView(String toView) &#123; this.toView = toView; &#125; public GridTbarMapping getTbarMapping() &#123; return tbarMapping; &#125; public void setTbarMapping(GridTbarMapping tbarMapping) &#123; this.tbarMapping = tbarMapping; &#125; public GridExtraAttribute getExtraAttribute() &#123; return extraAttribute; &#125; public void setExtraAttribute(GridExtraAttribute extraAttribute) &#123; this.extraAttribute = extraAttribute; &#125; public GridQueryParameter getQueryParameter() &#123; return queryParameter; &#125; public void setQueryParameter(GridQueryParameter queryParameter) &#123; this.queryParameter = queryParameter; &#125; public String getAttributeNamePrefix() &#123; if (attributeNamePrefix == null || attributeNamePrefix.trim().equals("")) return ATTR_NAME_PREFIX; return attributeNamePrefix; &#125; public void setAttributeNamePrefix(String attributeNamePrefix) &#123; this.attributeNamePrefix = attributeNamePrefix; &#125; public String getPageSize() &#123; return pageSize; &#125; public void setPageSize(String pageSize) &#123; this.pageSize = pageSize; &#125; /** * @param col * @describe : 追加一个column * @date : 2016年1月28日上午9:46:13 * @author : suny */ public boolean addColumn(GridColumn col) &#123; if (columns == null) &#123; columns = new GridColumns(); &#125; return columns.addColumn(col); &#125; /** * @param dataIndex * @param col * @describe : 在dataIndex后追加一个column * @date : 2016年1月28日上午9:46:23 * @author : suny */ public boolean addColumnAfter(String dataIndex, GridColumn col) &#123; if (columns == null) &#123; columns = new GridColumns(); &#125; return columns.addColumnAfter(dataIndex, col); &#125; /** * : 在dataIndex前追加一个column * * @param dataIndex * @param col * @return * @date : 2016年7月7日下午5:27:39 * @author : P2M.lin */ public boolean addColumnBefore(String dataIndex, GridColumn col) &#123; if (columns == null) &#123; columns = new GridColumns(); &#125; return columns.addColumnBefore(dataIndex, col); &#125; /** * @param dataIndex * @describe : 移除一个column * 如果dataIndex在columns中不存在则返回； * @date : 2016年1月28日上午9:46:52 * @author : suny */ public boolean removeColumn(String dataIndex) &#123; if (columns == null) &#123; return false; &#125; return columns.removeColumn(dataIndex); &#125; /** * @param button * @describe : 追加一个button * @date : 2016年1月28日上午11:06:38 * @author : suny */ public boolean addButton(GridButton button) &#123; if (tbar == null) &#123; tbar = new GridToolBar(); &#125; return tbar.addButton(button); &#125; /** * @param id * @param button * @describe : 在父buttton后增加子button，如果父亲button为空，则增加到第一层级的最后 * @date : 2016年1月28日上午11:06:53 * @author : suny */ public boolean addButton(String pBtnId, GridButton button) &#123; return tbar.addButton(pBtnId, button); &#125; /** * @param id * @param button * @describe : 在id后的button后面增加一个同级的button * @date : 2016年1月28日上午11:06:53 * @author : suny */ public boolean addButtonAfter(String id, GridButton button) &#123; if (tbar == null) &#123; tbar = new GridToolBar(); &#125; return tbar.addButtonAfter(id, button); &#125; public boolean addButtonBefore(String id, GridButton button) &#123; if (tbar == null) &#123; tbar = new GridToolBar(); &#125; return tbar.addButtonBefore(id, button); &#125; /** * @param id * @describe : 移除button * @date : 2016年1月28日上午11:07:40 * @author : suny */ public boolean removeButton(String id) &#123; if (tbar == null) return false; return tbar.removeButton(id); &#125; public String getDescription() &#123; return description; &#125; public void setDescription(String description) &#123; this.description = description; &#125; /** * 添加buttonMapping * by lip * * @param mapping * @return */ public boolean addGridTbarMapping(ButtonOperationMapping mapping) &#123; if (tbarMapping == null) &#123; tbarMapping = new GridTbarMapping(); &#125; return tbarMapping.addButtonOperationMapping(mapping); &#125; /** * 添加Field * by lip * * @param gridField * @return */ public boolean addField(GridField gridField) &#123; if (fields == null) &#123; fields = new GridFields(); &#125; return fields.addField(gridField); &#125; /** * 移除IFiledMapping * * @param gridField * @return */ public boolean removeField(String fieldName) &#123; if (fields == null) &#123; return false; &#125; return fields.removeField(fieldName); &#125; /** * 添加 GridJS * by lip * * @param gridJS * @return */ public boolean addGridJs(GridJS gridJS) &#123; if (script == null) &#123; script = new GridScript(); &#125; return script.addGridJs(gridJS); &#125; /** * 移除 GridJS * * @param src * @return */ public boolean removeGridJS(String src) &#123; if (script == null) &#123; return false; &#125; return script.removeGridJs(src); &#125; public Map&lt;String, String&gt; getDataIndexColumns() &#123; if (columnsMap == null) &#123; GridColumn gridColumn = null; columnsMap = new HashMap&lt;&gt;(); if (columns == null || columns.getColumns() == null) return null; for (int i = 0; i &lt; columns.getColumns().size(); i++) &#123; gridColumn = columns.getColumns().get(i); if (gridColumn != null) &#123; columnsMap.put(gridColumn.getDataIndex().toUpperCase(), gridColumn.getDataIndex()); &#125; &#125; &#125; return columnsMap; &#125; public Map&lt;String, String&gt; getUpperCaseMapFields() &#123; if (mapFields == null) &#123; mapFields = new HashMap&lt;&gt;(); IFieldMapping iFieldMapping = null; if (fields == null || fields.getFields() == null) return null; for (int i = 0; i &lt; fields.getFields().size(); i++) &#123; iFieldMapping = fields.getFields().get(i); if (iFieldMapping.getMapping() == null || "".equalsIgnoreCase(iFieldMapping.getMapping())) &#123; mapFields.put(iFieldMapping.getName().trim().toUpperCase(), iFieldMapping.getName().trim()); &#125; else &#123; mapFields.put(iFieldMapping.getName().trim().toUpperCase(), iFieldMapping.getMapping().trim()); &#125; &#125; &#125; return mapFields; &#125; public Map&lt;String, String&gt; getReturnMapFields() &#123; Map&lt;String, String&gt; returnMap = new HashMap&lt;String, String&gt;(); if (getDataIndexColumns() != null) &#123; returnMap.putAll(getDataIndexColumns()); &#125; if (getUpperCaseMapFields() != null) &#123; returnMap.putAll(getUpperCaseMapFields()); &#125; return returnMap; &#125;&#125; xml转bean的方法123456789101112131415161718192021 public static XStream processAnnotations() &#123; Class[] cls = new Class[]&#123;GridConfigList.class, GridConfig.class, GridColumns.class, GridColumn.class, GridField.class, GridButton.class, GridJS.class, GridScript.class, GridCSS.class, GridTbarMapping.class, ButtonOperationMapping.class&#125;; XStream xStream = XStreamUtil.processAnnotations(cls, GridConfigList.class); return xStream; &#125; public static void Xml2Bean()&#123; // 映射Xstream XStream x = processAnnotations(); try (InputStream is = new FileInputStream("filepath")) &#123; GridConfigList configList = (GridConfigList) x.fromXML(is); &#125; catch (FileNotFoundException e) &#123; e.printStackTrace(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125;&#125; 报错信息：12345678910Caused by: com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$UnknownFieldException: No such field com.config.tools.system.service.loader.vo.GridConfigList.grid---- Debugging information ----message : No such field com.config.tools.system.service.loader.vo.GridConfigList.gridfield : gridclass : com.config.tools.system.service.loader.vo.GridConfigListrequired-type : com.config.tools.system.service.loader.vo.GridConfigListconverter-type : com.thoughtworks.xstream.converters.reflection.ReflectionConverterpath : /grids/gridversion : 1.4.9------------------------------- 原因：没有设置classloader，springboot不知道加载那个类加载器。解决方案：加一行代码：1xStream.setClassLoader(cls.getClassLoader());]]></content>
      <tags>
        <tag>Spring-boot，XStream</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git合并多次提交为一次]]></title>
    <url>%2Fblog%2F2023%2F08%2Fgit%E5%90%88%E5%B9%B6%E5%A4%9A%E6%AC%A1%E6%8F%90%E4%BA%A4%E4%B8%BA%E4%B8%80%E6%AC%A1%2F</url>
    <content type="text"><![CDATA[合并多次提交为一次合并最近两次提交为一次命令：1git rebase -i head~2 命令：1git rebase -i [startpoint] [endpoint] 其中-i的意思是–interactive，即弹出交互式的界面让用户编辑完成合并操作，[startpoint] [endpoint]则指定了一个编辑区间，如果不指定[endpoint]，则该区间的终点默认是当前分支HEAD所指向的commit(注：该区间指定的是一个前开后闭的区间)。 指令编辑： pick：保留该commit（缩写:p） reword：保留该commit，但我需要修改该commit的注释（缩写:r） edit：保留该commit, 但我要停下来修改该提交(不仅仅修改注释)（缩写:e） squash：将该commit和前一个commit合并（缩写:s） fixup：将该commit和前一个commit合并，但我不要保留该提交的注释信息（缩写:f） exec：执行shell命令（缩写:x） drop：我要丢弃该commit（缩写:d）]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[docker-基本命令]]></title>
    <url>%2Fblog%2F2023%2F08%2Fdocker-%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[1. 环境信息相关命令1docker info 显示Docker系统信息，包括镜像和容器数 1docker -version 显示 Docker 版本信息 2.本地镜像管理1docker images 列出本地镜像 1docker rmi 删除镜像 1docker tag 标记一个本地镜像 1docker history查看指定镜像的历史 1docker save 将指定镜像保存成tar或者归档文件 1docker import 从归档文件创建镜像 3.容器操作命令 docker ps 列出容器 12345678910docker ps [OPTIONS]OPTIONS说明：-a :显示所有的容器，包括未运行的。-f :根据条件过滤显示的内容。--format :指定返回值的模板文件。-l :显示最近创建的容器。-n :列出最近创建的n个容器。--no-trunc :不截断输出。-q :静默模式，只显示容器编号。-s :显示总的文件大小。 4. docker容器生命周期命令123456789101112131415161718192021222324252627282930docker run 创建一个新的容器并运行一个命令docker run [OPTIONS] image [COMMAND] [ARG...]OPTIONS说明：-a stdin: 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；-d: 后台运行容器，并返回容器ID；-i: 以交互模式运行容器，通常与 -t 同时使用；-p: 端口映射，格式为：主机(宿主)端口:容器端口-t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；--name="nginx-lb": 为容器指定一个名称；--dns 8.8.8.8: 指定容器使用的DNS服务器，默认和宿主一致；--dns-search example.com: 指定容器DNS搜索域名，默认和宿主一致；-h "mars": 指定容器的hostname；-e username="ritchie": 设置环境变量；--env-file=[]: 从指定文件读入环境变量；--cpuset="0-2" or --cpuset="0,1,2": 绑定容器到指定CPU运行；-m :设置容器使用内存最大值；--net="bridge": 指定容器的网络连接类型，支持 bridge/host/none/container:&amp;lt;name|id&amp;gt; 四种类型；--link=[]: 添加链接到另一个容器；--expose=[]: 开放一个端口或一组端口；docker run --name mynginx -d nginx:latest使用docker镜像nginx:latest以后台模式启动一个容器,并将容器命名为mynginxdocker run -P -d nginx:latest使用镜像nginx:latest以后台模式启动一个容器,并将容器的80端口映射到主机随机端口docker run -p 80:80 -v /data:/data -d nginx:latest使用镜像 nginx:latest，以后台模式启动一个容器,将容器的80端口映射到主机的80端口,主机的目录/data映射到容器的/data。docker run -p 127.0.0.1:80:8080/tcp ubuntu bash绑定容器的8080端口，并将其映射到本地主机127.0.0.1的80端口上。docker run -it nginx:latest /bin/bash使用镜像nginx:latest以交互模式启动一个容器，在容器内执行/bin/bash命令。 1234docker start :启动一个或多少已经被停止的容器docker start [OPTIONS] CONTAINER [CONTAINER...]docker start myapp启动已被停止的容器myapp 1234docker stop :停止一个运行中的容器docker stop [OPTIONS] CONTAINER [CONTAINER...]docker stop myapp停止运行中的容器myapp 1234docker restart :重启容器docker restart [OPTIONS] CONTAINER [CONTAINER...]docker restart myapp重启容器myapp 1234567docker kill :杀掉一个运行中的容器。docker kill [OPTIONS] CONTAINER [CONTAINER...]OPTIONS说明：-s :向容器发送一个信号docker kill -s KILL mynginx杀掉运行中的容器mynginx 12345678910111213docker rm ：删除一个或多个容器 docker rm [OPTIONS] CONTAINER [CONTAINER...]OPTIONS说明：-f :通过SIGKILL信号强制删除一个运行中的容器-l :移除容器间的网络连接，而非容器本身-v :-v 删除与容器关联的卷docker rm -f db01 db02强制删除容器db01、db02docker rm -l db移除容器nginx01对容器db01的连接，连接名dbdocker rm -v nginx01删除容器nginx01,并删除容器挂载的数据卷 1234docker pause :暂停容器中所有的进程。docker pause [OPTIONS] CONTAINER [CONTAINER...]docker pause db01暂停数据库容器db01提供服务。 1234docker unpause :恢复容器中所有的进程docker unpause [OPTIONS] CONTAINER [CONTAINER...]docker unpause db01恢复数据库容器db01提供服务。 1234docker create ：创建一个新的容器但不启动它docker create [OPTIONS] IMAGE [COMMAND] [ARG...]docker create --name myapp nginx:latest使用docker镜像nginx:latest创建一个容器,并将容器命名为myapp 1234567891011docker exec ：在运行的容器中执行命令docker exec [OPTIONS] CONTAINER COMMAND [ARG...]OPTIONS说明：-d :分离模式: 在后台运行-i :即使没有附加也保持STDIN 打开-t :分配一个伪终端docker exec -it mynginx /bin/sh /root/runoob.sh在容器mynginx中以交互模式执行容器内/root/runoob.sh脚本docker exec -it mynginx /bin/bash在容器mynginx中开启一个交互模式的终端]]></content>
      <categories>
        <category>容器</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS3实现手风琴效果]]></title>
    <url>%2Fblog%2F2023%2F08%2FCSS3%E5%AE%9E%E7%8E%B0%E6%89%8B%E9%A3%8E%E7%90%B4%E6%95%88%E6%9E%9C%2F</url>
    <content type="text"><![CDATA[transition属性transition 属性是一个简写属性，用于设置四个过渡属性： transition-propertytransition-durationtransition-timing-functiontransition-delay语法： transition: property duration timing-function delay; 值 描述 transition-property 规定设置过渡效果的 CSS 属性的名称。 transition-duration 规定完成过渡效果需要多少秒或毫秒。 transition-timing-function 规定速度效果的速度曲线。 transition-delay 定义过渡效果何时开始 例子：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;Title&lt;/title&gt; &lt;style&gt; *&#123; padding: 0; margin: 0; &#125; .box&#123; width: 400px; height: 300px; margin: 100px auto; &#125; .menu&#123; background-color: lightgreen; &#125; .menu&gt;.item&#123; width: 100%; display: block; list-style: none; height: 0px; overflow: hidden; background-color: lightyellow; transition-property: height; transition-duration: 1s; &#125; ul&#123; list-style-type: none; &#125; .menu:hover .item&#123; height: 200px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class="box"&gt; &lt;div class="menu"&gt; &lt;h3&gt;你好啊&lt;/h3&gt; &lt;ul class="item"&gt; &lt;li&gt;超链接&lt;/li&gt; &lt;li&gt;超链接&lt;/li&gt; &lt;li&gt;超链接&lt;/li&gt; &lt;li&gt;超链接&lt;/li&gt; &lt;li&gt;超链接&lt;/li&gt; &lt;/ul&gt; &lt;/h3&gt; &lt;/div&gt; &lt;div class="menu"&gt; &lt;h3&gt;你好啊&lt;/h3&gt; &lt;ul class="item"&gt; &lt;li&gt;超链接&lt;/li&gt; &lt;li&gt;超链接&lt;/li&gt; &lt;li&gt;超链接&lt;/li&gt; &lt;li&gt;超链接&lt;/li&gt; &lt;li&gt;超链接&lt;/li&gt; &lt;/ul&gt; &lt;/h3&gt; &lt;/div&gt; &lt;div class="menu"&gt; &lt;h3&gt;你好啊&lt;/h3&gt; &lt;ul class="item"&gt; &lt;li&gt;超链接&lt;/li&gt; &lt;li&gt;超链接&lt;/li&gt; &lt;li&gt;超链接&lt;/li&gt; &lt;li&gt;超链接&lt;/li&gt; &lt;li&gt;超链接&lt;/li&gt; &lt;/ul&gt; &lt;/h3&gt; &lt;/div&gt; &lt;div class="menu"&gt; &lt;h3&gt;你好啊&lt;/h3&gt; &lt;ul class="item"&gt; &lt;li&gt;超链接&lt;/li&gt; &lt;li&gt;超链接&lt;/li&gt; &lt;li&gt;超链接&lt;/li&gt; &lt;li&gt;超链接&lt;/li&gt; &lt;li&gt;超链接&lt;/li&gt; &lt;/ul&gt; &lt;/h3&gt; &lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 效果：]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>css3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GITssh端口禁用]]></title>
    <url>%2Fblog%2F2023%2F08%2FGITssh%E7%AB%AF%E5%8F%A3%E7%A6%81%E7%94%A8%2F</url>
    <content type="text"><![CDATA[问题打开git bash推送代码1git push 出现问题：123456$ git pushssh: connect to host 192.168.5.166 port 22: Connection refusedfatal: Could not read from remote repository.Please make sure you have the correct access rightsand the repository exists. 原因及解决方案通过重新生成sshkey问题还不能解决，发现原因是ssh端口被禁用了运行命令1git remote -v 修改远程仓库1git remote rm origin 添加http协议的仓库地址1git remote add origin http://192.168.5.166/p2m/P2M.PURE.git 再次执行命令1git remote -v 运行命令1git pull origin dev 然后就能愉快的commit push代码了使用命令查看仓库详情1git remote show origin]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git push</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git命令小结]]></title>
    <url>%2Fblog%2F2023%2F08%2FGit%E5%91%BD%E4%BB%A4%E5%B0%8F%E7%BB%93%2F</url>
    <content type="text"><![CDATA[放弃修改 场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout – file。 场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD ，就回到了场景1，第二步按场景1操作。 场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。 版本回退：HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset –hard commit_id。 穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。 要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。 分支管理： 查看分支：git branch 创建分支：git branch 切换分支：git checkout 创建+切换分支：git checkout -b 合并某分支到当前分支：git merge 删除分支：git branch -d 解决冲突：当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。 解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。 用git log –graph命令可以看到分支合并图。 bug分支：修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除； 当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场 删除未合并的分支：开发一个新feature，最好新建一个分支； 如果要丢弃一个没有被合并过的分支，可以通过git branch -D 强行删除。 提交文件： git add -A 提交所有变化 git add -u 提交被修改(modified)和被删除(deleted)文件，不包括新文件(new) git add . 提交新文件(new)和被修改(modified)文件，不包括被删除(deleted)文件 rebase 提交历史线：rebase操作可以把本地未push的分叉提交历史整理成直线； rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。 标签管理：命令git tag 用于新建一个标签，默认为HEAD，也可以指定一个commit id； 命令git tag -a -m “blablabla…”可以指定标签信息； 命令git tag可以查看所有标签。 命令git push origin 可以推送一个本地标签； 命令git push origin –tags可以推送全部未推送过的本地标签； 命令git tag -d 可以删除一个本地标签； 命令git push origin :refs/tags/可以删除一个远程标签。 忽略文件：忽略某些文件时，需要编写.gitignore； .gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理！ git忽略文件提交的文件修改已经推送（push）过的文件，想在以后的提交时忽略此文件，即使本地已经修改过，而且不删除git远程库中相应文件 执行命令1git update-index --assume-unchanged Xml/config.xml 后面的 Xml/config.xml 是要忽略的文件的路径。如果要忽略一个目录，打开 git bash，cd到 目标目录下，执行：1git update-index --assume-unchanged $(git ls-files | tr '\n' ' ') 比如有一个配置文件记录数据库的链接信息，每个人的链接信息肯定不一样，但是又要提供一个标准的模板，用来告知如何填写链接信息，那么就需要在git远程库上有一个标准配置文件，然后每个人根据自己的具体情况，修改一份链接信息自用，而且不会将该配置文件提交到库12git update-index –assume-unchanged –path 可以忽略文件 git update-index –no-assume-unchanged –path 可以取消忽略文件 但是忽略的文件多了，想找出所有被忽略的文件，暂时找到下面的办法，1git ls-files -v | grep '^h\ ' 提取文件路径，方法如下1git ls-files -v | grep '^h\ ' | awk '&#123;print $2&#125;' 所有被忽略的文件，取消忽略的方法，如下1git ls-files -v | grep '^h' | awk '&#123;print $2&#125;' |xargs git update-index --no-assume-unchanged]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git命令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git log 命令用法]]></title>
    <url>%2Fblog%2F2023%2F08%2FGit%20log%20%E5%91%BD%E4%BB%A4%E7%94%A8%E6%B3%95%2F</url>
    <content type="text"><![CDATA[git log用于查询版本的历史，命令形式如下：1git log [&lt;options&gt;] [&lt;since&gt;..&lt;until&gt;] [[--] &lt;path&gt;...] 这条命令有很多参数选项一、不带参数 如果不带任何参数，它会列出所有历史记录，最近的排在最上方，显示提交对象的哈希值，作者、提交日期、和提交说明 如果记录过多，则按Page Up、Page Down、↓、↑来控制显示 按q退出历史记录列表 二、显示参数 -p：按补丁显示每个更新间的差异，比下一条- -stat命令信息更全 –stat：显示每次更新的修改文件的统计信息，每个提交都列出了修改过的文件，以及其中添加和移除的行数，并在最后列出所有增减行数小计 –shortstat：只显示–stat中最后的行数添加修改删除统计 –name-only：尽在已修改的提交信息后显示文件清单 –name-status：显示新增、修改和删除的文件清单 –abbrev-commit：仅显示SHA-1的前几个字符，而非所有的40个字符 –relative-date：使用较短的相对时间显示（例如：”two weeks ago”） –graph：显示ASCII图形表示的分支合并历史 —pretty＝：使用其他格式显示历史提交信息，可选项有：oneline,short,medium,full,fuller,email,raw以及format:,默认为medium，如： –pretty=oneline：一行显示，只显示哈希值和提交说明（–online本身也可以作为单独的属性） –pretty=format:” “：控制显示的记录格式，如： %H 提交对象（commit）的完整哈希字串 %h 提交对象的简短哈希字串 %T 树对象（tree）的完整哈希字串 %t 树对象的简短哈希字串 %P 父对象（parent）的完整哈希字串 %p 父对象的简短哈希字串 %an 作者（author）的名字 %ae 作者的电子邮件地址 %ad 作者修订日期（可以用 -date= 选项定制格式） %ar 作者修订日期，按多久以前的方式显示 %cn 提交者(committer)的名字 作者和提交者的区别不知道是啥？ 作者与提交者的关系：作者是程序的修改者，提交者是代码提交人（自己的修改不提交是怎么能让别人拉下来再提交的？） 其实作者指的是实际作出修改的人，提交者指的是最后将此工作成果提交到仓库的人。所以，当你为某个项目发布补丁，然后某个核心成员将你的补丁并入项目时，你就是作者，而那个核心成员就是提交者（soga） %ce 提交者的电子邮件地址 %cd 提交日期（可以用 -date= 选项定制格式） %cr 提交日期，按多久以前的方式显示 %s 提交说明 带颜色的–pretty=format:” “，这个另外写出来分析 以这句为例：%Cred%h%Creset -%C(yellow)%d%Cblue %s %Cgreen(%cd) %C(bold blue)&lt;%an&gt; 它的效果是： 先断句：［%Cred%h］［%Creset -］［%C(yellow)%d ］［%Cblue%s］［%Cgreen(%cd)］［%C(bold blue)&lt;%an&gt;］ 然后就是很明显能得到的规律了一个颜色＋一个内容 颜色以％C开头，后边接几种颜色，还可以设置字体，如果要设置字体的话，要一块加个括号能设置的颜色值包括：reset（默认的灰色），normal, black, red, green, yellow, blue, magenta, cyan, white.字体属性则有bold, dim, ul, blink, reverse. 内容可以是占位元字符，也可以是直接显示的普通字符 –date= (relative|local|default|iso|rfc|short|raw)：定制后边如果出现%ad或%cd时的日期格式 有几个默认选项 –date=relative：shows dates relative to the current time, e.g. “2 hours ago”. –date=local：shows timestamps in user’s local timezone. –date=iso (or –date=iso8601)：shows timestamps in ISO 8601 format. –date=rfc (or –date=rfc2822)：shows timestamps in RFC 2822 format,often found in E-mail messages. –date=short：shows only date but not time, in YYYY-MM-DD format.这个挺好用 –date=raw：shows the date in the internal raw git format %s %z format. –date=default：shows timestamps in the original timezone (either committer’s or author’s). 也可以自定义格式（需要git版本2.6.0以上），比如–date=format:’%Y-%m-%d %H:%M:%S’ 会格式化成：2016-01-13 11:32:13，其他的格式化占位符如下： %a：Abbreviated weekday name %A：Full weekday name %b：Abbreviated month name %B：Full month name %c：Date and time representation appropriate for locale %d：Day of month as decimal number (01 – 31) %H： Hour in 24-hour format (00 – 23) %I：Hour in 12-hour format (01 – 12) %j：Day of year as decimal number (001 – 366) %m：Month as decimal number (01 – 12) %M：Minute as decimal number (00 – 59) %p：Current locale’s A.M./P.M. indicator for 12-hour clock %S：Second as decimal number (00 – 59) %U：Week of year as decimal number, with Sunday as first day of week (00 – 53) %w：Weekday as decimal number (0 – 6; Sunday is 0) %W：Week of year as decimal number, with Monday as first day of week (00 – 53) %x：Date representation for current locale %X：Time representation for current locale %y：Year without century, as decimal number (00 – 99) %Y：Year with century, as decimal number %z, %Z：Either the time-zone name or time zone abbreviation, depending on registry settings; no characters if time zone is unknown %%：Percent sign 三、筛选参数： 按数量 -n：显示前n条log 按日期 –after= 比如git log–after=”2014-7-1”，显示2014年7月1号之后的commit(包含7月1号) 后边的日期还可以用相对时间表示，比如”1 week ago”和”yesterday”，比如git log 1. –after=”yesterday” 这里的格式可以是什么？ –before= 同上 另外这两条命令可以同时使用表示时间段，比如git log –after=”2014-7-1” –before=”2014-7-4” 另外–since –until和 –after –before是一个意思，都可以用 按作者 –author= 比如git log –author=“John”，显示John贡献的commit 注意：作者名不需要精确匹配，只需要包含就行了 而且：可以使用正则表达式，比如git log –author=”John|Mary”，搜索Marry和John贡献的commit 而且：这个–author不仅包含名还包含email, 所以你可以用这个搜索email 按commit描述 –grep= 比如：git log –grep=”JRA-224” 而且：可以传入-i用来忽略大小写 注意：如果想同时使用–grep和–author，必须在附加一个–all-match参数 按文件 - -（空格）或［没有］ 有时你可能只对某个文件的修改感兴趣, 你只想查看跟某个文件相关的历史信息, 你只需要插入你感兴趣文件的路径［对，是路径，所以经常是不太好用］就可以了 比如：git log – foo.py bar.py ，只返回和foo.py或bar.py相关的commit 这里的–是告诉Git后面的参数是文件路径而不是branch的名字. 如果后面的文件路径不会和某个branch产生混淆, 你可以省略- -，比如git log foo.py 另外，后边的路径还支持正则，比如：git log *install.md 是，指定项目路径下的所有以install.md结尾的文件的提交历史 另外，文件名应该放到参数的最后位置，通常在前面加上–并用空格隔开表示是文件 另外，git log file/ 查看file文件夹下所有文件的提交记录 按分支 - - –branchName branchName为任意一个分支名字，查看某个分支上的提交记录 需要放到参数中的最后位置处 如果分支名与文件名相同，系统会提示错 误，可通过–选项来指定给定的参数是分支名还是文件名 比如：在当前分支中有一个名为v1的文件，同时还存在一个名为v1的分支 git log v1 – 此时的v1代表的是分支名字（－－后边是空的） git log – v1 此时的v1代表的是名为v1的文件 git log v1 －－ v1 代表v1分支下的v1文件 按内容 -S”“、-G”“ 有时你想搜索和新增或删除某行代码相关的commit. 可以使用这条命令 假设你想知道Hello, World!这句话是什么时候加入到项目里去的，可以用：git log -S”Hello,World!” 另外：如果你想使用正则表达式去匹配而不是字符串, 那么你可以使用-G代替-S. 这是一个非常有用的debug工具, 使用他你可以定位所有跟某行代码相关的commit. 甚至可以查看某行是什么时候被copy的, 什么时候移到另外一个文件中去的 注：-S后没有”=”，与查询内容之间也没有空格符 按范围 git log .. 这个命令可以查看某个范围的commit 这个命令非常有用当你使用branch做为range参数的时候. 能很方便的显示2个branch之间的不同 比如：git log master..feature，master..feature这个range包含了在feature有而在master没有的所有commit，同样，如果是feature..master包含所有master有但是feature没有的commit 另外，如果是三个点，表示或的意思：git log master…test 查询master或test分支中的提交记录 过滤掉merge commit –no-merges 默认情况下git log会输出merge commit. 你可以通过–no-merges标记来过滤掉merge commit，git log –no-merges 另外，如果你只对merge commit感兴趣可以使用—merges，git log –merges 按标签tag git log v1.0 直接这样是查询标签之前的commit 加两个点git log v1.0.. 查询从v1.0以后的提交历史记录(不包含v1.0) 按commit git log commit ：查询commit之前的记录，包含commit git log commit1 commit2：查询commit1与commit2之间的记录，包括commit1和commit2 git log commit1..commit2：同上，但是不包括commit1 其中，commit可以是提交哈希值的简写模式，也可以使用HEAD代替 HEAD代表最后一次提交，HEAD^为最后一个提交的父提交，等同于HEAD～1 HEAD～2代表倒数第二次提交 几个配置12345678910git config --global alias.lm "log --no-merges --color --date=format:'%Y-%m-%d %H:%M:%S' --author='你的名字！自己修改！' --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Cblue %s %Cgreen(%cd) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit"git config --global alias.lms "log --no-merges --color --stat --date=format:'%Y-%m-%d %H:%M:%S' --author='你的名字！自己修改！' --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Cblue %s %Cgreen(%cd) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit"git config --global alias.ls "log --no-merges --color --graph --date=format:'%Y-%m-%d %H:%M:%S' --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Cblue %s %Cgreen(%cd) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit"git config --global alias.lss "log --no-merges --color --stat --graph --date=format:'%Y-%m-%d %H:%M:%S' --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Cblue %s %Cgreen(%cd) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit"]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git命令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git命令小结（2）]]></title>
    <url>%2Fblog%2F2023%2F08%2FGit%E5%91%BD%E4%BB%A4%E5%B0%8F%E7%BB%93%EF%BC%882%EF%BC%89%2F</url>
    <content type="text"><![CDATA[git同步远程已删除的分支 远程已经删除的分支，本地更新后还存在。git branch -a查看本地分支和远程分支的情况 但远程分支删除后，本地并没有同步过来的情况。 查看本地分支和追踪情况1git remote show origin 运行命令同步删除远程已经删除但是本地没有删除的分支1git remote prune origin 再次运行命令查看本地分支和远程分支1git branch -a 发现远程已删除但是本地未删除的分支，本地也删除了。]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git命令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTML5+CSS3让元素垂直水平居中]]></title>
    <url>%2Fblog%2F2023%2F08%2FHTML5%2BCSS3%E8%AE%A9%E5%85%83%E7%B4%A0%E5%9E%82%E7%9B%B4%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD%2F</url>
    <content type="text"><![CDATA[垂直水平居中一个元素置于另一个元素，垂直水平居中显示原理： 利用定位＋CSS偏移让元素居中 示例代码：1234567891011121314151617181920212223242526272829303132333435363738&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;style&gt; * &#123; margin: 0; padding: 0; &#125; .box &#123; width: 400px; height: 400px; border-radius: 50%; border: 1px solid red; margin: 100px auto; position: relative; &#125; .content &#123; width: 200px; height: 200px; border: 1px solid blue; position: absolute; left: 50%; top: 50%; transform: translate(-50%, -50%); text-align: center; &#125;&lt;/style&gt;&lt;body&gt;&lt;div class="box"&gt; &lt;div class="content"&gt;div垂直水平居中&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 效果图：]]></content>
      <categories>
        <category>HTML5</category>
      </categories>
      <tags>
        <tag>html5</tag>
        <tag>居中</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTML5web字体和图标字体]]></title>
    <url>%2Fblog%2F2023%2F08%2FHTML5web%E5%AD%97%E4%BD%93%E5%92%8C%E5%9B%BE%E6%A0%87%E5%AD%97%E4%BD%93%2F</url>
    <content type="text"><![CDATA[web字体web字体使用步骤： 打开网址阿里巴巴矢量图标库 打开在线字体 输入文字 下载素材 下载的素材目录结构： 打开demo.index按照步骤在项目中使用web字体 iconfont字体图标iconfont字体图标和web字体使用方式一致 打开图标库 选择图标，添加至购物车 点击购物车，添加到项目 图标管理下载到本地 目录机构： demo_index的使用说明：]]></content>
      <categories>
        <category>HTML5</category>
      </categories>
      <tags>
        <tag>HTML5</tag>
        <tag>字体</tag>
      </tags>
  </entry>
</search>
